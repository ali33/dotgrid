<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotGrid</name>
    </assembly>
    <members>
        <member name="T:DotGrid.Database.UserAccounts">
            <summary>
            Manages user accounts.
            </summary>
        </member>
        <member name="M:DotGrid.Database.UserAccounts.#ctor(System.String,System.Net.NetworkCredential)">
            <summary>
            A constructor for UserAccounts class.
            </summary>
            <param name="MySqlAddress">MySql server address.</param>
            <param name="nc">Needed credential for connecting to MySql server.</param>
        </member>
        <member name="M:DotGrid.Database.UserAccounts.AddUser(System.Boolean,System.Net.NetworkCredential)">
            <summary>
            Adds new user to MySql accounts database.
            </summary>
            <param name="isAdministratorAccount">True, if this user is for an Administrator account that has full system permission. Otherwise, False for Others kind accounts.</param>
            <param name="newUser">New user credential.</param>
            <returns>If there are not a user with this provided newUser account, True will be returned.</returns>
        </member>
        <member name="M:DotGrid.Database.UserAccounts.LoginUser(System.Net.NetworkCredential)">
            <summary>
            Logins a user account.
            </summary>
            <param name="userAccount">User credential to login.</param>
            <returns>Returns true, if the user already exists in accounts database.</returns>
        </member>
        <member name="M:DotGrid.Database.UserAccounts.LoginAndGetUserPermissions(System.Net.NetworkCredential,DotGrid.DotSec.Permission.Permissions@)">
            <summary>
            Logins and gets user permissions the user account.
            </summary>
            <param name="userAccount">User credential to login.</param>
            <param name="permission">If permission is null, this user account is an administrator permission with unlimited system permissions.</param>
            <returns>Returns true, if the user already exists in accounts database.</returns>
        </member>
        <member name="M:DotGrid.Database.UserAccounts.DeleteUser(System.Net.NetworkCredential)">
            <summary>
            Deletes an available user account from accounts database.
            </summary>
            <param name="userAccount">The user account to delete.</param>
        </member>
        <member name="M:DotGrid.Database.UserAccounts.UpdateUserPermisions(DotGrid.DotSec.Permission.Permissions,System.Net.NetworkCredential)">
            <summary>
            Updates permissions for the user account.
            </summary>
            <param name="newPermission">Updated new user permission.</param>
            <param name="userAccount">The user account to update permissions.</param>
        </member>
        <member name="T:DotGrid.DotDfs.DirectoryMovementClient">
            <summary>
            Provides fundamental methods for remote directory and file operations based on DotDFS protocol in FTSM mode.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.#ctor(System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            A constructor for DirectoryMovementClient class.
            </summary>
            <param name="dotDfsServerAddress">The remote DotDFS server address.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination DotDFS server.</param>
            <param name="secure">Determines secure or secureless connection based on DotGrid.DotSec transfer layer security.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path.
            </summary>
            <param name="path">The directory path to create.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory and its contents.
            </summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.DeleteFile(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">The name of the file to be deleted. </param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.ExistsDirectory(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on remote DotDFS disk.
            </summary>
            <param name="path">The path to test.</param>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.ExistsFile(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="path">The file to check. </param>
            <returns>true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is a null reference (Nothing in Visual Basic) or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application.
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of type String containing the names of subdirectories in path.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.GetFiles(System.String)">
            <summary>
            Returns the names of files in the specified directory.
            </summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <returns>A String array of file names in the specified directory.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.MoveDirectory(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">The path of the file or directory to move. </param>
            <param name="destDirName">The path to the new location for sourceDirName. </param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.MoveFile(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move. </param>
            <param name="destFileName">The new path for the file. </param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.DownloadFile(System.String,System.String,System.Int64,System.Int64,System.Int32,System.Int64@)">
            <summary>
            Downloads a remote file located at DotDFS server to a local file through a single TCP connection.
            </summary>
            <param name="localFilename">The local file name.</param>
            <param name="remoteFilename">The remote file name.</param>
            <param name="offset">The point relative to origin from which to begin file transferring.</param>
            <param name="length">The maximum number of bytes to transfer.With 0 or -1 length, the length parameter will be set with the real length of the remote file.</param>
            <param name="tcpBufferSize">Specifies both TCP Window and file read/write buffer sizes.</param>
            <param name="transferredBytes">Finds value of current transferred bytes to remote DotDFS server.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.UploadFile(System.String,System.String,System.Int64,System.Int64,System.Int32,System.Int64@)">
            <summary>
            Uploads a local file to remote DotDFS server through a single TCP connection.
            </summary>
            <param name="localFilename">The local file name.</param>
            <param name="remoteFilename">The remote file name.</param>
            <param name="offset">The point relative to origin from which to begin file transferring. With 0 or -1 length, the length parameter will be set with the real length of the local file.</param>
            <param name="length">The maximum number of bytes to transfer, negative or zero length state all content file to transfer.</param>
            <param name="tcpBufferSize">Specifies both TCP Window and file read/write buffer sizes.</param>
            <param name="transferredBytes">Finds value of current transferred bytes to remote DotDFS server.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.SendFileHeader(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Sends a file header to DotDFS server.
            </summary>
            <param name="array">The buffer to send.</param>
            <param name="position">The current position of local file pointer.</param>
            <param name="n">Value of read local file buffer.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.GetFileSize(System.String)">
            <summary>
            Gets the size of the current remote file.
            </summary>
            <param name="path">The file to get size.</param>
            <returns>The size of the current remote file.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.Close">
            <summary>
            Closes all remote connections and releases all consumed system handles.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.PublicKeyAuthentication(System.Net.Sockets.Socket)">
            <summary>
            Does Public Key Authentication protocol based on DotSec.
            </summary>
            <param name="sock">The connected socket to remote endpoint.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.AuthenticationHeaderBuilder(System.String,System.String)">
            <summary>
            Builds AuthenticationHeader filed for user login.
            </summary>
            <param name="username">Username of the user.</param>
            <param name="password">Password of the user.</param>
            <returns>bytes of AuthenticationHeader.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DirectoryMovementClient.InsertStringToBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Insert the str to buffer with the initial index of buffer.
            </summary>
            <param name="str">Desried string for inserting to buffer, str must be ASCFII String.</param>
            <param name="buffer">Buffer stream.</param>
            <param name="index">Starting position in buffer for inserting str onto buffer.</param>
        </member>
        <member name="T:DotGrid.DotDfs.DownloadDirectoryClient">
            <summary>
            This class extends DirectoryMovementClient class and add download capabilities of a directory tree from DotDFS server to local path via using parallel TCP connections.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryClient.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Net.NetworkCredential,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of DownloadDirectoryClient class.
            </summary>
            <param name="localDirectoryPath">The local directory path name to download the remote directory tree to it located on remote DotDFS server.</param>
            <param name="remoteDirectoryPath">The remote directory path name to download.</param>
            <param name="dotDfsServerAddress">The remote DotDFS server address.</param>
            <param name="parallel">Number of parallel TCP Connections.</param>
            <param name="tcpBufferSize">Specifies both TCP Window and file read/write buffer sizes.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination DotDFS server.</param>
            <param name="secure">Determines secure or secureless connection based on DotGrid.DotSec transfer layer security.</param>
            <param name="ignoreReplace">Specifies whether the program must ignore replacing available files in server side or must not ignore.</param>
            <param name="ignoreExceptions">Specifies whether the program must throw any dropped exception by the server and ending run or must ignore any thrown exception.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryClient.Run">
            <summary>
            Runs the directory tree transfer.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryClient.DequeueNewFile">
            <summary>
            Dequeues a new file from queue to transfer by thread workers.
            </summary>
            <returns>A new file name to transfer.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryClient.AddCurrentCompletedFileCount">
            <summary>
            Making increment a unit to current completed file count. This method only must be used by thread workers instantiated of DownloadDirectoryWorker class.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryClient.Close">
            <summary>
            Closes all workers threads and connections to DotDFS server. Calling this method will cause that all consumed system recourses are released.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryClient.TravelAllRemoteDirectories(System.String)">
            <summary>
            Travels the remote directory tree recursively. 
            </summary>
            <param name="path">The remote directory path name to travel.</param>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryClient.StartTime">
            <summary>
            Gets the starting time of the directory tree transfer. 
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryClient.EndTime">
            <summary>
            Gets the final time of the directory tree transfer.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryClient.TotalElapsedTime">
            <summary>
            Gets the total elapsed time in this directory tree transfer session.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryClient.CurrentTransferredBytes">
            <summary>
            Gets current number of transferred bytes in this directory tree transfer session.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryClient.CompletedPercentage">
            <summary>
            Gets percentage of current completed directory tree transfer session.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryClient.LocalDirectoryPath">
            <summary>
            Gets local directory path of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryClient.RemoteDirectoryPath">
            <summary>
            Gets remote directory path of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryClient.ThrownExceptions">
            <summary>
            Gets a collection of thrown server or client side exceptions. If there are no any exception, null will be returned. 
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.DownloadDirectoryWorker">
            <summary>
            This class provides a thread worker to download files in when using DownloadDirectoryClient class.
            </summary>
        </member>
        <member name="F:DotGrid.DotDfs.DownloadDirectoryWorker.i">
            <summary>
            i
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryWorker.#ctor(DotGrid.DotDfs.DirectoryMovementClient,DotGrid.DotDfs.DownloadDirectoryClient,System.Int32,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Initializes a new instance of DownloadDirectoryWorker class.
            </summary>
            <param name="client">A DirectoryMovementClient instance.</param>
            <param name="manager">The manager that manages and controls execution of this thread worker.</param>
            <param name="tcpBufferSize">Specifies both TCP Window and file read/write buffer sizes.</param>
            <param name="errors">An reference for storing thrown system exceptions from the DotDFS server side or local system.</param>
            <param name="ignoreExceptions">Specifies whether the program must throw any dropped exception by the server and ending run or must ignore any thrown exception.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryWorker.Run">
            <summary>
            Runs this instance thread worker.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryWorker.WorkerProc">
            <summary>
            Implements the thread worker procedure.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadDirectoryWorker.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryWorker.TransferredBytes">
            <summary>
            Gets number of transferred bytes for this thread worker;
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadDirectoryWorker.IsFinished">
            <summary>
            Gets whether this worker has finished its work.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.DownloadFileInfo">
            <summary>
            Specifies necessary information for downloading a requested file from client to DotDFS server.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DownloadFileInfo.#ctor(System.String,System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes an DownloadFileInfo instance. 
            </summary>
            <param name="remoteFilename">The remote file name.</param>
            <param name="tcpBufferSize">TCP Window size.</param>
            <param name="offset">The offset in which downloading remote file will be started.</param>
            <param name="length">Value in which downloading remote file will be finished.With 0 or -1 length, the length parameter will be set with the real length of the remote file.</param>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadFileInfo.RemoteFilename">
            <summary>
            Gets the remote file name.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadFileInfo.TcpBufferSize">
            <summary>
            Gets the TCP Windows size.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadFileInfo.Offset">
            <summary>
            Gets the offset seek.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DownloadFileInfo.Length">
            <summary>
            Gets or sets the specified file length.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.UploadDirectoryClient">
            <summary>
            This class extends DirectoryMovementClient class and add upload capabilities of a directory tree to DotDFS server via using parallel TCP connections.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryClient.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Net.NetworkCredential,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of UploadDirectoryClient class.
            </summary>
            <param name="localDirectoryPath">The local directory path name to upload to remote DotDFS server.</param>
            <param name="remoteDirectoryPath">The remote directory path name to upload the local directory tree to it..</param>
            <param name="dotDfsServerAddress">The remote DotDFS server address.</param>
            <param name="parallel">Number of parallel TCP Connections.</param>
            <param name="tcpBufferSize">Specifies both TCP Window and file read/write buffer sizes.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination DotDFS server.</param>
            <param name="secure">Determines secure or secureless connection based on DotGrid.DotSec transfer layer security.</param>
            <param name="ignoreReplace">Specifies whether the program must ignore replacing available files in server side or must not ignore.</param>
            <param name="ignoreExceptions">Specifies whether the program must throw any dropped exception by the server and ending run or must ignore any thrown exception.</param>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryClient.Run">
            <summary>
            Runs the directory tree transfer.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryClient.DequeueNewFile">
            <summary>
            Dequeues a new file from queue to transfer by thread workers.
            </summary>
            <returns>A new file name to transfer.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryClient.AddCurrentCompletedFileCount">
            <summary>
            Making increment a unit to current completed file count. This method only must be used by thread workers instantiated of  UploadDirectoryWorker class.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryClient.Close">
            <summary>
            Closes all workers threads and connections to DotDFS server. Calling this method will cause that all consumed system recourses are released.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryClient.TravelAllLocalDirectories(System.String)">
            <summary>
            Travels the local directory tree recursively. 
            </summary>
            <param name="path">The local directory path name to travel.</param>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryClient.StartTime">
            <summary>
            Gets the starting time of the directory tree transfer. 
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryClient.EndTime">
            <summary>
            Gets the final time of the directory tree transfer.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryClient.TotalElapsedTime">
            <summary>
            Gets the total elapsed time in this directory tree transfer session.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryClient.CurrentTransferredBytes">
            <summary>
            Gets current number of transferred bytes in this directory tree transfer session.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryClient.CompletedPercentage">
            <summary>
            Gets percentage of current completed directory tree transfer session.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryClient.LocalDirectoryPath">
            <summary>
            Gets local directory path of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryClient.RemoteDirectoryPath">
            <summary>
            Gets remote directory path of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryClient.ThrownExceptions">
            <summary>
            Gets a collection of thrown server or client side exceptions. If there are no any exception, null will be returned. 
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.UploadDirectoryWorker">
            <summary>
            This class provides a thread worker to upload files in when using UploadDirectoryClient class.
            </summary>
        </member>
        <member name="F:DotGrid.DotDfs.UploadDirectoryWorker.i">
            <summary>
            i
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryWorker.#ctor(DotGrid.DotDfs.DirectoryMovementClient,DotGrid.DotDfs.UploadDirectoryClient,System.Int32,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Initializes a new instance of DownloadDirectoryWorker class.
            </summary>
            <param name="client">A DirectoryMovementClient instance.</param>
            <param name="manager">The manager that manages and controls execution of this thread worker.</param>
            <param name="tcpBufferSize">Specifies both TCP Window and file read/write buffer sizes.</param>
            <param name="errors">An reference for storing thrown system exceptions from the DotDFS server side or local system.</param>
            <param name="ignoreExceptions">Specifies whether the program must throw any dropped exception by the server and ending run or must ignore any thrown exception.</param>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryWorker.Run">
            <summary>
            Runs this instance thread worker.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryWorker.WorkerProc">
            <summary>
            Implements the thread worker procedure.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.UploadDirectoryWorker.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryWorker.TransferredBytes">
            <summary>
            Gets number of transferred bytes for this thread worker;
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.UploadDirectoryWorker.IsFinished">
            <summary>
            Gets whether this worker has finished its work.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.FileTransferDownload">
            <summary>
            Summary description for FileTransferDownload.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferDownload.#ctor(System.String,System.String,System.Int32,System.Int32,System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            
            </summary>
            <param name="writeFilename"></param>
            <param name="remoteFilename"></param>
            <param name="parallel"></param>
            <param name="tcpBufferSize"></param>
            <param name="dotDfsServerAddress"></param>
            <param name="nc"></param>
            <param name="secure"></param>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferDownload.Run">
            <summary>
            Runs the file transfer session to the remote DotDfs server.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferDownload.Close">
            <summary>
            Closes all connections to remote DotDfs server and worker threads.By invoking this method, all consumed system resources will be released.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferDownload.PublicKeyAuthentication(System.Net.Sockets.Socket,DotGrid.DotSec.SecureBinaryReader@,DotGrid.DotSec.SecureBinaryWriter@)">
            <summary>
            
            </summary>
            <param name="sock"></param>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferDownload.AuthenticationHeaderBuilder(System.String,System.String)">
            <summary>
            Builds AuthenticationHeader filed for user login.
            </summary>
            <param name="username">Username of the user.</param>
            <param name="password">Password of the user.</param>
            <returns>bytes of AuthenticationHeader.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferDownload.InsertStringToBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Insert the str to buffer with the initial index of buffer.
            </summary>
            <param name="str">Desried string for inserting to buffer, str must be ASCFII String.</param>
            <param name="buffer">Buffer stream.</param>
            <param name="index">Starting position in buffer for inserting str onto buffer.</param>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferDownload.CurrentTransferredBytes">
            <summary>
            Gets the current transferred bytes of the remote file located at DotDfs server to local file.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferDownload.TotalElapsedTime">
            <summary>
            After finishing the transfer session, gets total elapsed time for the transfer in milliseconds format.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.DotDfsFileStream">
            <summary>
            Exposes a Stream around a remote file, supporting both synchronous and asynchronous read and write operations.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,DotGrid.Shared.Enums.DotDFS.PathEncoding,System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Initializes a new instance of the FileStream class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="remotePath">A remote relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="encoding">A PathEncoding constant that determines how the path file will be encoded by processes.</param>
            <param name="dotDfsServerAddress">dotDfsServer Address.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination dotDfs server.</param>
            <param name="Secure">Determines secure or secureless connection based on DotGrid.DotSec transfer layer security.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.System#IDisposable#Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.ExceptionResponse">
            <summary>
            Investigates if server reply with an exception response then an exception will be dropped.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.PublicKeyAuthentication(System.Net.Sockets.NetworkStream)">
            <summary>
            Does public key authentication.
            </summary>
            <param name="ns">Network stream.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer with tcpBufferSize length.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="array">The array to which bytes are written.</param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.WriteInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer with tcpBufferSize length.
            </summary>
            <param name="array">The array to which bytes are written.</param>
            <param name="offset">The byte offset in array at which to begin writing.</param>
            <param name="count">The maximum number of bytes to write.</param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Close">
            <summary>
            Closes the file and releases any resources associated with the current file stream.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Lock(System.Int64,System.Int64)">
            <summary>
            Prevents other processes from changing the FileStream while permitting read access.
            </summary>
            <param name="position">The beginning of the range to unlock.</param>
            <param name="length">The range to be unlocked.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.UnLock(System.Int64,System.Int64)">
            <summary>
            Allows access by other processes to all or part of a file that was previously locked.
            </summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).</param>
            <param name="length">The range to be locked.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.LockOrUnlock(System.Boolean,System.Int64,System.Int64)">
            <summary>
            Lock or Unlock the FileStream instance.
            </summary>
            <param name="Lock">If Lock is true then this header will be LockHeader, otherwise is UnlockHeader.</param>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).</param>
            <param name="length">The range to be locked.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.GetPositionOrLength(System.Boolean)">
            <summary>
            Gets position or Length of the current FileStream instance.
            </summary>
            <param name="Position">If Position is true then this method will find Position, otherwise Length.</param>
            <returns>Position or Length value of current FileStream instance with attention to Position field.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.ConnectionClose">
            <summary>
            Close the connected connection to dotDfs server.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.AuthenticationHeaderBuilder(System.String,System.String)">
            <summary>
            Builds AuthenticationHeader filed for user login.
            </summary>
            <param name="username">Username of the user.</param>
            <param name="password">Password of the user.</param>
            <returns>bytes of AuthenticationHeader.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.InsertStringToBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Insert the str to buffer with the initial index of buffer.
            </summary>
            <param name="str">Desried string for inserting to buffer, str must be ASCFII String.</param>
            <param name="buffer">Buffer stream.</param>
            <param name="index">Starting position in buffer for inserting str onto buffer.</param>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Receive(System.Int32)">
            <summary>
            Reads a maximum of n bytes from the current network stream into buffer and return it.
            </summary>
            <param name="n">states n bytes for reading from network stream</param>
            <returns>Return received buffer data, if there are'nt no data then null will be returned.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count bytes from the stream with offset as the starting point in the byte array.
            </summary>
            <param name="array">The array to read data into.</param>
            <param name="offset">The starting point in the buffer at which to begin reading into the array.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of characters read into buffer. This might be less than the number of bytes requested if that many bytes are not available, or it might be -1 if there is an error.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.ReceiveByte">
            <summary>
            Reads a bytes from the current network stream into buffer and return it.
            </summary>
            <returns>Return received buffer data.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Send(System.Byte[])">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Send(System.Byte)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsFileStream.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <param name="offset">The starting point in buffer at which to begin writing. </param>
            <param name="count">The number of bytes to write.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="P:DotGrid.DotDfs.DotDfsFileStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DotDfsFileStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DotDfsFileStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DotDfsFileStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DotDfsFileStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.DotDfsFileStream.Name">
            <summary>
            Gets the name of the FileStream that was passed to the constructor.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.FileTransferInfo">
            <summary>
            Specifies necessary information for FileTransfer server mode.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferInfo.#ctor(System.String,System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the FileTransferInfo class.
            </summary>
            <param name="guid">Unique ID of this instance.</param>
            <param name="writeFilename">Filename to write it.</param>
            <param name="fileSize">Length of this file.</param>
            <param name="parallel">Specifies numbers of parallel TCP/IP connections for FileTransfer server mode.</param>
            <param name="tcpBufferSize">Specifies buffer length to write.</param>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferInfo.GUID">
            <summary>
            Gets unique ID of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferInfo.WriteFileName">
            <summary>
            Gets the filename of this instance to write it.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferInfo.tcpBufferSize">
            <summary>
            Gets the tcpBufferSize of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferInfo.ParallelSize">
            <summary>
            Gets the numbers of parallel TCP/IP connections of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferInfo.FileSize">
            <summary>
            Gets file size of this instance.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.FileTransferModeHearderInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferModeHearderInfo.#ctor(System.Int64,System.Byte[])">
            <summary>
            
            </summary>
            <param name="offsetSeek"></param>
            <param name="buffer"></param>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferModeHearderInfo.SeekValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferModeHearderInfo.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.QWriteCompare">
            <summary>
            Summary description for QWriteCompare.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.ReadInfo">
            <summary>
            Specifies a class for reading file blocks to queue.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.ReadInfo.#ctor(System.Byte[]@,System.Int64)">
            <summary>
            Initializes a new instance of ReadInfo class
            </summary>
            <param name="buffer">The read buffer block.</param>
            <param name="offsetSeek">Offset of this file block.</param>
        </member>
        <member name="P:DotGrid.DotDfs.ReadInfo.Buffer">
            <summary>
            Gets buffer data of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.ReadInfo.Length">
            <summary>
            Gets buffer length of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.ReadInfo.OffsetSeek">
            <summary>
            Gets offset seek value of this instance.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.FileTransferUpload">
            <summary>
            This class provides upload capabilities a file to destination DotDFS server supporting paralell TCP connections to increase throughput in when large file transfers.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferUpload.#ctor(System.String,System.String,System.Int32,System.Int32,System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Initializes a new instance of FileTransferUpload class.
            </summary>
            <param name="readFilename">The local file name to transfer. For memory-to-memory tests the readFilename must be set to /dev/zero only in Linux and Unix operating systems.</param>
            <param name="remoteFilename">The remote file name for writing to it. For memory-to-memory tests the remoteFilename must be set to /dev/null only in Linux and Unix operating systems.</param>
            <param name="parallel">Number of parallel TCP Connections.</param>
            <param name="tcpBufferSize">Specifies both TCP Window and file read/write buffer sizes.</param>
            <param name="dotDfsServerAddress">Provides credentials for password-based authentication schemes to destination DotDFS server.</param>
            <param name="nc"></param>
            <param name="secure">Determines secure or secureless connection based on DotGrid.DotSec transfer layer security.</param>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferUpload.Run">
            <summary>
            Runs the file transfer session to the remote DotDfs server.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferUpload.Close">
            <summary>
            Closes all connections to remote DotDfs server and worker threads.By invoking this method, all consumed system resources will be released.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferUpload.ReadFromFile(System.Byte[]@,System.Int64@)">
            <summary>
            Read a file block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferUpload.PublicKeyAuthentication(System.Net.Sockets.Socket,DotGrid.DotSec.SecureBinaryReader@,DotGrid.DotSec.SecureBinaryWriter@)">
            <summary>
            
            </summary>
            <param name="sock"></param>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferUpload.AuthenticationHeaderBuilder(System.String,System.String)">
            <summary>
            Builds AuthenticationHeader filed for user login.
            </summary>
            <param name="username">Username of the user.</param>
            <param name="password">Password of the user.</param>
            <returns>bytes of AuthenticationHeader.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileTransferUpload.InsertStringToBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Insert the str to buffer with the initial index of buffer.
            </summary>
            <param name="str">Desried string for inserting to buffer, str must be ASCFII String.</param>
            <param name="buffer">Buffer stream.</param>
            <param name="index">Starting position in buffer for inserting str onto buffer.</param>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferUpload.CurrentTransferredBytes">
            <summary>
            Gets the current transferred bytes of the local file to remote DotDfs server.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.FileTransferUpload.TotalElapsedTime">
            <summary>
            After finishing the transfer session, gets total elapsed time for the transfer in milliseconds format.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.OneStreamUpload">
            <summary>
            Summary description for OneStreamUpload.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.OneStreamUpload.#ctor(DotGrid.DotDfs.QueueRead@,System.String,System.String,System.Int64,System.Int32,System.Int32,System.String,System.Net.NetworkCredential,System.Boolean,DotGrid.DotSec.RijndaelEncryption@,System.Boolean,System.Collections.ArrayList@)">
            <summary>
            
            </summary>
            <param name="qread"></param>
            <param name="remoteFilename"></param>
            <param name="guid"></param>
            <param name="fileSize"></param>
            <param name="parallel"></param>
            <param name="tcpBufferSize"></param>
            <param name="dotDfsServerAddress"></param>
            <param name="nc"></param>
            <param name="secure"></param>
            <param name="rijndael"></param>
            <param name="memmoryToMemoryTests"></param>
            <param name="errors"></param>
        </member>
        <member name="M:DotGrid.DotDfs.OneStreamUpload.WorkerProc">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.OneStreamUpload.Run">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.OneStreamUpload.WorkerExit">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.OneStreamUpload.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.OneStreamUpload.PublicKeyAuthentication(System.Net.Sockets.Socket)">
            <summary>
            
            </summary>
            <param name="sock"></param>
        </member>
        <member name="M:DotGrid.DotDfs.OneStreamUpload.AuthenticationHeaderBuilder(System.String,System.String)">
            <summary>
            Builds AuthenticationHeader filed for user login.
            </summary>
            <param name="username">Username of the user.</param>
            <param name="password">Password of the user.</param>
            <returns>bytes of AuthenticationHeader.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.OneStreamUpload.InsertStringToBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Insert the str to buffer with the initial index of buffer.
            </summary>
            <param name="str">Desried string for inserting to buffer, str must be ASCFII String.</param>
            <param name="buffer">Buffer stream.</param>
            <param name="index">Starting position in buffer for inserting str onto buffer.</param>
        </member>
        <member name="P:DotGrid.DotDfs.OneStreamUpload.WrittenSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.OneStreamUpload.StartTime">
            <summary>
            
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.OneStreamUpload.EndTime">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.QueueRead">
            <summary>
            Summary description for QueueRead.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.QueueRead.ThreadProc">
            <summary>
            Manages execution of the worker thread.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.QueueRead.Read(System.Byte[]@,System.Int64@)">
            <summary>
            Read a file block from the queue read.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotDfs.QueueRead.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotDfs.QueueRead.Length">
            <summary>
            Gets a long value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="T:DotGrid.DotDfs.ClientDirectoryMovementRequest">
            <summary>
            Summary description for Session.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.ClientDirectoryMovementRequest.#ctor(DotGrid.Net.DotGridSocket)">
            <summary>
            
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:DotGrid.DotDfs.ClientDirectoryMovementRequest.Run">
            <summary>
            Runs the session.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.ClientDirectoryMovementRequest.SendFileHeader(System.Byte[],System.Int64,System.Int64)">
            <summary>
            Sends a file header to DotDFS client.
            </summary>
            <param name="array">The buffer to send.</param>
            <param name="position">The current position of local file pointer.</param>
            <param name="n">Value of read local file buffer.</param>
        </member>
        <member name="T:DotGrid.DotDfs.SessionClientDownloadRequest">
            <summary>
            Summary description for Session.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.SessionClientDownloadRequest.ReadFromFile(System.Byte[]@,System.Int64@)">
            <summary>
            Read a file block.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotGrid.DotDfs.SessionClientUploadRequest">
            <summary>
            This class implements the DotDFS protocol interpretor for Upload Request from client side in FTSM mode. 
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.SessionClientUploadRequest.#ctor(DotGrid.Net.DotGridSocket,System.Collections.Hashtable@,DotGrid.DotDfs.FileTransferInfo,System.Collections.ArrayList@)">
            <summary>
            Initializes a new instance of SessionClientUploadRequest class.
            </summary>
            <param name="socket"></param>
            <param name="Sessions"></param>
            <param name="transferInfo"></param>
            <param name="connections"></param>
        </member>
        <member name="T:DotGrid.DotDfs.FileStreamRequest">
            <summary>
            Implements DotDfsServer daemon in DFSM mode.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.#ctor(DotGrid.DotSec.SecureBinaryReader,DotGrid.DotSec.SecureBinaryWriter)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Run">
            <summary>
            Runs and manges new DotDfs FileStream session with the underlying thread OS.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Read(System.Int32)">
            <summary>
            Read buffer from FileStream instance and writes it to network stream.
            </summary>
            <param name="b">One last received byte.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Write(System.Int32)">
            <summary>
            Receives buffer and writes it to FileStream instance.
            </summary>
            <param name="b">One last received byte.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <returns>Error code.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Close">
            <summary>
            Closes the file and releases any resources associated with the current file stream.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.SetLength(System.Int32)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="b">One last received byte.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.LockOrUnlock(System.Int32,System.Boolean)">
            <summary>
            Lock or Unlock the FileStream instance.
            </summary>
            <param name="b">One last received byte.</param>
            <param name="Lock">If Lock is true then this header will be LockHeader, otherwise is UnlockHeader.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Seek(System.Int32)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="b">One last received byte.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.PositionOrLength(System.Boolean)">
            <summary>
            Gets position or Length of the current FileStream instance.
            </summary>
            <param name="Position">If Position is true then this method will find Position, otherwise Length.</param>
            <returns>Error code.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>Error code.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.ThreadExit">
            <summary>
            Exits current client connection and release all system resources.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.SendErrorMessage(System.Byte)">
            <summary>
            Send error or success messages to dfsClient.
            </summary>
            <param name="error">Error code.</param>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Receive(System.Int32)">
            <summary>
            Reads a maximum of n bytes from the current network stream into buffer and return it.
            </summary>
            <param name="n">states n bytes for reading from network stream</param>
            <returns>Return received buffer data, if there arent no data then null will be returned.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count bytes from the stream with offset as the starting point in the byte array.
            </summary>
            <param name="array">The array to read data into.</param>
            <param name="offset">The starting point in the buffer at which to begin reading into the array.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of characters read into buffer. This might be less than the number of bytes requested if that many bytes are not available, or it might be -1 if there is an error.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.ReceiveByte">
            <summary>
            Reads a bytes from the current network stream into buffer and return it.
            </summary>
            <returns>Return received buffer data.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Send(System.Byte[])">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writting to network stream.</param>
            <returns>If any errors occured, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Send(System.Byte)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writting to network stream.</param>
            <returns>If any errors occured, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.DotDfs.FileStreamRequest.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writting to network stream.</param>
            <param name="offset">The starting point in buffer at which to begin writing. </param>
            <param name="count">The number of bytes to write.</param>
            <returns>If any errors occured, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="T:DotGrid.DotDfs.Server">
            <summary>
            Summary description for Server.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.Server.#ctor(System.Net.Sockets.Socket,System.Collections.Hashtable@,DotGrid.DotSec.RSA@,System.Collections.ArrayList@)">
            <summary>
            
            </summary>
            <param name="sock"></param>
            <param name="Sessions"></param>
            <param name="ServerRSA"></param>
            <param name="connections"></param>
        </member>
        <member name="M:DotGrid.DotDfs.Server.ProtocolInterpreter">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.Server.GetFileTransferInfo">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotDfs.Server.PublicKeyAuthentication(System.Net.Sockets.Socket)">
            <summary>
            
            </summary>
            <param name="sock"></param>
            <returns></returns>
        </member>
        <member name="T:DotGrid.DotDfs.DotDfsServer">
            <summary>
            This class provides running capability of a DotDfs server instance on a machine with a separte worker thread. Attend that installed firewall on remote machine must allow the DotDfs server instance to run. 
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsServer.#ctor">
            <summary>
            Initializes an DotDfsServer instance. 
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsServer.Start">
            <summary>
            Start execution of this DotDfs server instance.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsServer.WorkerProc">
            <summary>
            Manages the worker thread.
            </summary>
        </member>
        <member name="M:DotGrid.DotDfs.DotDfsServer.Close">
            <summary>
            Closes all connected connections to DotDfs server and worker threads.By invoking this method, all consumed system resources will be released.
            </summary>
        </member>
        <member name="T:DotGrid.Net.DotGridSocket">
            <summary>
            This class enables DotGrid socket operations that have low-level implementation.
            </summary>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.#ctor(DotGrid.DotSec.SecureBinaryReader,DotGrid.DotSec.SecureBinaryWriter)">
            <summary>
            Initializes a new instance of the DotGridSocket class.
            </summary>
            <param name="reader">A SecureBinaryReader instance that implements DotSec protocol.</param>
            <param name="writer">A SecureBinaryWriter instance that implements DotSec protocol.</param>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)">
            <summary>
            Determines the status of one or more sockets.
            </summary>
            <param name="checkRead">An IList of Socket instances to check for readability. </param>
            <param name="checkWrite">An IList of Socket instances to check for writability. </param>
            <param name="checkError">An IList of Socket instances to check for errors.</param>
            <param name="microSeconds">The time-out value, in microseconds. A -1 value indicates an infinite time-out.</param>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.#ctor(System.Net.Sockets.Socket,DotGrid.DotSec.SecureBinaryReader,DotGrid.DotSec.SecureBinaryWriter)">
            <summary>
            Initializes a new instance of the DotGridSocket class.
            </summary>
            <param name="socket">A Socket class for next usages.</param>
            <param name="reader">A SecureBinaryReader instance that implements DotSec protocol.</param>
            <param name="writer">A SecureBinaryWriter instance that implements DotSec protocol.</param>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.#ctor(System.Net.Sockets.Socket,DotGrid.DotSec.RijndaelEncryption)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="rijndael"></param>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.WriteException(System.Exception)">
            <summary>
            Writes a exception object to remote endpoint (the remote client) based on DotGrid ExceptionHandlingHeader protocol.
            </summary>
            <param name="e">The Exception object.</param>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.WriteNoException">
            <summary>
            Notifies the remote endpoint (the remote client) that no exception has occurred based on DotGrid ExceptionHandlingHeader protocol.
            </summary>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.CheckExceptionResponse">
            <summary>
            Investigates if remote endpoint (thew remote server) reply with an exception response then an exception will be dropped.
            </summary>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Close">
            <summary>
            Close the connected connection to remote endpoint.
            </summary>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.ReadObject">
            <summary>
            Reads an object from network stream.
            </summary>
            <returns>Returned object from network stream.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.WriteObject(System.Object)">
            <summary>
            Writes an object to network stream.
            </summary>
            <param name="obj">Favorite object for sending to network stream.</param>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Read(System.Byte[],System.Int32)">
            <summary>
            Reads any length buffer from SecureBinaryReader stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes any length buffer to SecureBinaryWriter stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Write(System.Byte[])">
            <summary>
            Writes any buffer to SecureBinaryWriter stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between 0 and Array.Length - 1 replaced by the bytes read from the current source.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads maximum 32KB or 64KB length buffer from SecureBinaryReader stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Read(System.Int32)">
            <summary>
            Reads a maximum of n bytes from the current network stream into buffer and return it.
            </summary>
            <param name="n">states n bytes for reading from network stream</param>
            <returns>Return received buffer data, if there are'nt no data then null will be returned.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count bytes from the stream with offset as the starting point in the byte array.
            </summary>
            <param name="array">The array to read data into.</param>
            <param name="offset">The starting point in the buffer at which to begin reading into the array.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of characters read into buffer. This might be less than the number of bytes requested if that many bytes are not available, or it might be -1 if there is an error.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.ReadByte">
            <summary>
            Reads a bytes from the current network stream into buffer and return it.
            </summary>
            <returns>Return received buffer data.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Send(System.Byte[])">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.WriteByte(System.Byte)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.Net.DotGridSocket.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <param name="offset">The starting point in buffer at which to begin writing. </param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="P:DotGrid.Net.DotGridSocket.IsSecure">
            <summary>
            Gets whether this stream is in secure or non-secure mode.
            </summary>
        </member>
        <member name="P:DotGrid.Net.DotGridSocket.BaseStream">
            <summary>
            Exposes access to the underlying stream of the DotGridSocket.
            </summary>
        </member>
        <member name="P:DotGrid.Net.DotGridSocket.BaseSocket">
            <summary>
            Exposes access to the underlying socket of the DotGridSocket.
            </summary>
        </member>
        <member name="P:DotGrid.Net.DotGridSocket.FromDownloadDirectoryClient">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotGrid.DotRemoteProcess.DotRemoteProcessClient">
            <summary>
            States a remote process on DotGridRemoteProcessServer. This class provides both remote job submission and remote process management for remote processes.
            </summary>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.#ctor(System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Initializes a new instance of the DotRemoteProcessClient class without job submission support. Use this constructor only for remote processes management.
            </summary>
            <param name="DotGridRemoteProcessServerAddress">dotGridThread server address.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination dotDfs server.</param>
            <param name="Secure">Determines secure or secureless connection.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.#ctor(System.Diagnostics.ProcessStartInfo,System.String[],System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Initializes a new instance of the DotRemoteProcessClient class with job submission support. Dont use this constructor for remote processes management.
            </summary>
            <param name="info">Specifies ProcessStartInfo for local remote process to upload to remote server.</param>
            <param name="dependencies">File name dependencies for this process.</param>
            <param name="DotGridRemoteProcessServerAddress">dotGridThread server address.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination dotDfs server.</param>
            <param name="Secure">Determines secure or secureless connection.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.#ctor(System.Diagnostics.ProcessStartInfo,System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Initializes a new instance of the DotRemoteProcessClient class with job submission support. Dont use this constructor for remote processes management.
            </summary>
            <param name="info">Specifies ProcessStartInfo for local remote process to upload to remote server.</param>
            <param name="DotGridRemoteProcessServerAddress">dotGridThread server address.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination dotDfs server.</param>
            <param name="Secure">Determines secure or secureless connection.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.DotRemoteProcessClientInitialize(System.Diagnostics.ProcessStartInfo,System.String[],System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Initializes a this DotRemoteProcessClient instance.
            </summary>
            <param name="info">Specifies ProcessStartInfo for local remote process to upload to remote server.</param>
            <param name="dependencies">File name dependencies for this process.</param>
            <param name="DotGridRemoteProcessServerAddress">dotGridThread server address.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination dotDfs server.</param>
            <param name="Secure">Determine secure or secureless connection.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Start">
            <summary>
            Starts (or reuses) the remote process resource that is specified by the StartInfo property of this DotRemoteProcessClient component and associates it with the component.
            </summary>
            <returns>true if a remote process resource is started; false if no new remote process resource is started (for example, if an existing remote process is reused).</returns>
            <remarks>Use this overload to start a process resource and associate it with the current DotRemoteProcessClient component. The return value true indicates that a new remote process resource was started. If the remote process resource specified by the FileName member of the RemoteProcessStartInfo property is already running on the remote computer, no additional remote process resource is started. Instead, the running remote process resource is reused and false is returned.</remarks>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Kill">
            <summary>
            Immediately stops the associated remote process.
            </summary>
            <remarks>Kill forces a termination of the remote process, while CloseMainWindow only requests a termination. When a process with a graphical interface is executing, its message loop is in a wait state. The message loop executes every time a Windows message is sent to the process by the operating system. Calling CloseMainWindow sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application. The request to exit the process by calling CloseMainWindow does not force the application to quit. The application can ask for user verification before quitting, or it can refuse to quit. To force the application to quit, use the Kill method. The behavior of CloseMainWindow is identical to that of a user closing an application's main window using the system menu. Therefore, the request to exit the process by closing the main window does not force the application to quit immediately. Data edited by the process or resources allocated to the process can be lost if you call Kill. Kill causes an abnormal process termination and should be used only when necessary. CloseMainWindow enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface. If CloseMainWindow fails, you can use Kill to terminate the process. Kill is the only way to terminate processes that do not have graphical interfaces.You can call Kill and CloseMainWindow only for processes that are running on the local computer. You cannot cause processes on remote computers to exit. You can only view information for processes running on remote computers.</remarks>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Refresh">
            <summary>
            Discards any information about the associated remote process that has been cached inside the remote process component.
            </summary>
            <remarks>After Refresh is called, the first request for information about each property causes the remote process component to obtain a new value from the associated remote process.When a DotRemoteProcessClient component is associated with a remote process resource, the property values of the DotRemoteProcessClient are immediately populated according to the status of the associated remote process. If the information about the associated remote process subsequently changes, those changes are not reflected in the DotRemoteProcessClient component's cached values. The DotRemoteProcessClient component is a snapshot of the remote process resource at the time they are associated. To view the current values for the associated remote process, call the Refresh method.</remarks>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Close">
            <summary>
            Frees and disconnects all the resources that are associated with this component from the DotRemoteProcessClient server,
            </summary>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.GetRemoteProcesses">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.KillById(System.Int32)">
            <summary>
            Immediately stops the associated remote process with the processId.
            </summary>
            <param name="processID">the unique identifier for the associated remote process.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.GetRemoteProcessInfoById(System.Int32)">
            <summary>
            Gets information of associated remote processes by the processId.
            </summary>
            <param name="processID">the unique identifier for the associated remote process.</param>
            <returns>A RemoteProcessInfo that represents the remote process information by the processId running on the remote computer.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.ReceiveObject">
            <summary>
            Receives an object from network stream.
            </summary>
            <returns>Returned object from network stream.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.SendObject(System.Object)">
            <summary>
            Sends an object to network stream.
            </summary>
            <param name="obj">Favorite object for sending to network stream.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.PublicKeyAuthentication(System.Net.Sockets.NetworkStream)">
            <summary>
            Does public key authentication.
            </summary>
            <param name="ns">Network stream.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.AuthenticationHeaderBuilder(System.String,System.String)">
            <summary>
            Builds AuthenticationHeader filed for user login.
            </summary>
            <param name="username">Username of the user.</param>
            <param name="password">Password of the user.</param>
            <returns>bytes of AuthenticationHeader.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.InsertStringToBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Insert the str to buffer with the initial index of buffer.
            </summary>
            <param name="str">Desried string for inserting to buffer, str must be ASCFII String.</param>
            <param name="buffer">Buffer stream.</param>
            <param name="index">Starting position in buffer for inserting str onto buffer.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.ExceptionResponse">
            <summary>
            Investigates if server reply with an exception response then an exception will be dropped.
            </summary>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.ConnectionClose">
            <summary>
            Close the connected connection to remote server.
            </summary>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Read(System.Byte[],System.Int32)">
            <summary>
            Reads any length buffer from SecureBinaryReader stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes any length buffer to SecureBinaryReader stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads maximum 32KB or 64KB length buffer from SecureBinaryReader stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Receive(System.Int32)">
            <summary>
            Reads a maximum of n bytes from the current network stream into buffer and return it.
            </summary>
            <param name="n">states n bytes for reading from network stream</param>
            <returns>Return received buffer data, if there aren't no data then null will be returned.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count bytes from the stream with offset as the starting point in the byte array.
            </summary>
            <param name="array">The array to read data into.</param>
            <param name="offset">The starting point in the buffer at which to begin reading into the array.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of characters read into buffer. This might be less than the number of bytes requested if that many bytes are not available, or it might be -1 if there is an error.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.ReceiveByte">
            <summary>
            Reads a bytes from the current network stream into buffer and return it.
            </summary>
            <returns>Return received buffer data.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Send(System.Byte[])">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Send(System.Byte)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.DotRemoteProcessClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <param name="offset">The starting point in buffer at which to begin writing. </param>
            <param name="count">The number of bytes to write.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.DotRemoteProcessClient.ProcessInfo">
            <summary>
            Gets remote process information.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.DotRemoteProcessClient.ExitTime">
            <summary>
            Gets termination time of this remote process instance.
            </summary>
        </member>
        <member name="T:DotGrid.DotRemoteProcess.RemoteProcessInfo">
            <summary>
            Specifies remote process information.
            </summary>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.RemoteProcessInfo.#ctor(System.Diagnostics.Process)">
            <summary>
            Initializes a new instance of the RemoteProcessInfo class.
            </summary>
            <param name="remoteProcess">Specifies local remote process.</param>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.HandleCount">
            <summary>
            Gets the number of handles opened by the remote process. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.HasExited">
            <summary>
            Gets a value indicating whether the associated remote process has been terminated. 1 for true and 0 for false. If any errors occures on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.Id">
            <summary>
            Gets the unique identifier for the associated remote process. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.NonpagedSystemMemorySize">
            <summary>
            Gets the nonpaged system memory size allocated to this remote process. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.PagedMemorySize">
            <summary>
            Gets the paged memory size for the remote process. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.PagedSystemMemorySize">
            <summary>
            Gets the paged system memory size for the remote process. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.PeakPagedMemorySize">
            <summary>
            Gets the peak paged memory size for the remote process. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.PeakWorkingSet">
            <summary>
            Gets the peak working set size for the remote process. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.PrivateMemorySize">
            <summary>
            Gets the private memory size for the remote process. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.ProcessName">
            <summary>
            Gets the name of the remote process.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.Responding">
            <summary>
            Gets a value indicating whether the user interface of the remote process is responding. 1 for true and 0 for false. If any errors occures on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.StartTime">
            <summary>
            Gets the time that the associated remote process was started.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.TotalProcessorTime">
            <summary>
            Gets the total processor time for this remote process.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.UserProcessorTime">
            <summary>
            Gets the user processor time for this remote process.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.VirtualMemorySize">
            <summary>
            Gets the size of the remote process's virtual memory. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessInfo.WorkingSet">
            <summary>
            Gets the associated remote process's physical memory usage. If any errors occurs on server-side, this value will be -1. 
            </summary>
        </member>
        <member name="T:DotGrid.DotRemoteProcess.RemoteProcessStartInfo">
            <summary>
            Specifies a set of values used when starting a remote process.
            </summary>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.RemoteProcessStartInfo.#ctor(System.Diagnostics.ProcessStartInfo,System.String[])">
            <summary>
            Initializes a new instance of the RemoteProcessStartInfo class.
            </summary>
            <param name="info">Specifies ProcessStartInfo for local remote process.</param>
            <param name="dependencies">File name dependencies for this process.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.RemoteProcessStartInfo.#ctor(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Initializes a new instance of the RemoteProcessStartInfo class.
            </summary>
            <param name="info">Specifies ProcessStartInfo for local remote process.</param>
        </member>
        <member name="M:DotGrid.DotRemoteProcess.RemoteProcessStartInfo.SortUniqeDependencies(System.String[])">
            <summary>
            Sorts and modifies unique dependencies and returns new sorted and modified dependencies.
            </summary>
            <param name="dependencies">dependencies for sorting and modifying.</param>
            <returns>Sorted and modified dependencies.</returns>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessStartInfo.Arguments">
            <summary>
            Gets the set of command line arguments to use when starting the application.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessStartInfo.FileName">
            <summary>
            Gets the application or document to start.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessStartInfo.Verb">
            <summary>
            Gets the set of verb associated with the type of file specified by the FileName property.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessStartInfo.Dependencies">
            <summary>
            Gets file name dependencies for this process.
            </summary>
        </member>
        <member name="P:DotGrid.DotRemoteProcess.RemoteProcessStartInfo.GUID">
            <summary>
            Gets guid of this instance.
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.Authentication">
            <summary>
            Summary description for Authentication.
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.MD5">
             <summary>
            A complete class for MD5 hashing algorithm.
             </summary>
        </member>
        <member name="M:DotGrid.DotSec.MD5.#ctor">
            <summary>
            Initializes a new instance of MD5.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.MD5.MD5hash(System.Byte[])">
            <summary>
            Hash the input data.
            </summary>
            <param name="data">Input data.</param>
            <returns>Hased data.</returns>
        </member>
        <member name="M:DotGrid.DotSec.MD5.MD5hash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Hash the input data.
            </summary>
            <param name="data">Input data.</param>
            <param name="offset">The starting point in the data at which to begin hashing.</param>
            <param name="count">The number of characters to hash.</param>
            <returns>Hased data.</returns>
        </member>
        <member name="T:DotGrid.DotSec.Permission.Permissions">
            <summary>
            Represents complete .NET Code Access Security (CAS) Runtime permissions.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.Permission.Permissions.#ctor">
            <summary>
            Constructor for Permissions class.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.Permission.Permissions.ToXml(DotGrid.DotSec.Permission.Permissions)">
            <summary>
            Builds XML instance from permission input.
            </summary>
            <param name="permission">Thread permissions.</param>
            <returns>Permission XML Representation.</returns>
        </member>
        <member name="M:DotGrid.DotSec.Permission.Permissions.ToXmlTag(System.String,System.Boolean)">
            <summary>
            Builds XML permissions tags.
            </summary>
            <param name="name">Name of the tag.</param>
            <param name="value">Value of the tag.</param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.Permission.Permissions.FromXml(System.String)">
            <summary>
            Builds a Permissions instance from string xml representation.
            </summary>
            <param name="xml">a string XML Permissions instance.</param>
            <returns>A Permissions instance.</returns>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.OdbcPermission">
            <summary>
            Gets or sets the .NET Framework Data Provider for ODBC to ensure that a user has a security level adequate to access an ODBC data source.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.OleDbPermission">
            <summary>
            Gets or sets the .NET Framework Data Provider for OLE DB to ensure that a user has a security level adequate to access an OLE DB data source.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.OraclePermission">
            <summary>
            Gets or sets the .NET Framework Data Provider for Oracle to ensure that a user has a security level adequate to access an Oracle database.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.SqlClientPermission">
            <summary>
            Gets or sets the .NET Framework Data Provider for SQL Server to ensure that a user has a security level adequate to access a data source.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.EventLogPermission">
            <summary>
            Gets or sets control of code access permissions for event logging.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.PerformanceCounterPermission">
            <summary>
            Gets or sets control of code access permissions for PerformanceCounter.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.DirectoryServicesPermission">
            <summary>
            Gets or sets control of code access security permissions for System.DirectoryServices.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.PrintingPermission">
            <summary>
            Gets or sets access to printers.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.MessageQueuePermission">
            <summary>
            Gets or sets control of code access permissions for messaging.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.DnsPermission">
            <summary>
            Gets or sets rights to access Domain Name System (DNS) servers on the network.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.SocketPermission">
            <summary>
            Gets or sets rights to make or accept connections on a transport address.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.EnvironmentPermission">
            <summary>
            Gets or sets access to system and user environment variables.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.FileDialogPermission">
            <summary>
            Gets or sets the ability to access files or folders through a file dialog.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.FileIOPermission">
            <summary>
            Gets or sets the ability to access files and folders.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.IsolatedStorageFilePermission">
            <summary>
            Gets or sets the allowed usage of a private virtual file system.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.PrincipalPermission">
            <summary>
            Gets or sets checks against the active principal (see IPrincipal) using the language constructs defined for both declarative and imperative security actions.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.PublisherIdentityPermission">
            <summary>
            Gets or sets the identity of a software publisher.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ReflectionPermission">
            <summary>
            Gets or sets access to metadata through the System.Reflection APIs.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.RegistryPermission">
            <summary>
            Gets or sets the ability to access registry variables.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.Assertion">
            <summary>
            Gets or sets
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.BindingRedirects">
            <summary>
            Gets or sets permission to perform explicit binding redirection in the application configuration file. This includes redirection of .NET Framework assemblies that have been unified as well as other assemblies found outside the .NET Framework.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ControlAppDomain">
            <summary>
            Gets or sets Ability to create and manipulate an AppDomain.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ControlDomainPolicy">
            <summary>
            Gets or sets ability to specify domain policy.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ControlEvidence">
            <summary>
            Gets or sets ability to provide evidence, including the ability to alter the evidence provided by the common language runtime. This is a powerful permission that should only be granted to highly trusted code.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ControlPolicy">
            <summary>
            Gets or sets ability to view and modify policy. This is a powerful permission that should only be granted to highly trusted code.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ControlPrincipal">
            <summary>
            Gets or sets ability to manipulate the principal object.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ControlThread">
            <summary>
            Gets or sets ability to use certain advanced operations on threads.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.Execution">
            <summary>
            Gets or sets permission for the code to run. Without this permission, managed code will not be executed. This flag has no effect when used dynamically with stack modifiers such as Deny, Assert, and PermitOnly.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.Infrastructure">
            <summary>
            Gets or sets permission to plug code into the common language runtime infrastructure, such as adding Remoting Context Sinks, Envoy Sinks and Dynamic Sinks.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.RemotingConfiguration">
            <summary>
            Gets or sets permission to configure Remoting types and channels.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.SerializationFormatter">
            <summary>
            Gets or sets ability to provide serialization services. Used by serialization formatters.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.SkipVerification">
            <summary>
            Gets or sets ability to skip verification of code in this assembly. Code that is unverifiable can be run if this permission is granted. This is a powerful permission that should be granted only to highly trusted code. This flag has no effect when used dynamically with stack modifiers such as Deny, Assert, and PermitOnly.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.UnmanagedCode">
            <summary>
            Gets or sets ability to call unmanaged code. Since unmanaged code potentially allows other permissions to be bypassed, this is a dangerous permission that should only be granted to highly trusted code. It is used for such applications as calling native code using PInvoke or using COM interop.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.SecurityPermission">
            <summary>
            Gets access flags for the security permission object.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.SiteIdentityPermission">
            //**************************************************************************************************************//
            <summary>
            Gets or sets the identity permission for the Web site from which the code originates.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.StrongNameIdentityPermission">
            <summary>
            Gets or sets the identity permission for strong names. 
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.UIPermission">
            <summary>
            Gets or sets the permissions related to user interfaces and the clipboard.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.UrlIdentityPermission">
            <summary>
            Gets or sets the identity permission for the URL from which the code originates.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ZoneIdentityPermission">
            <summary>
            Gets or sets the identity permission for the zone from which the code originates. 
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.ServiceControllerPermission">
            <summary>
            Gets or sets control of code access security permissions for service controllers.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.Permission.Permissions.AspNetHostingPermission">
            <summary>
            Gets or sets access permissions in ASP.NET hosted environments.
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.RC2Encryption">
            <summary>
            A complete class for RC2 encryption.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of RC2Encryption with key and iv.
            </summary>
            <param name="key">The secret key for the symmetric algorithm.</param>
            <param name="IV">The initialization vector (IV) for the symmetric algorithm.</param>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of RC2Encryption with random generated key and iv and desired key size.
            </summary>
            <param name="KeySize">Desired key size.</param>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.#ctor">
            <summary>
            Initializes a new instance of RC2Encryption with random generated key and iv.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.encrypt(System.Byte[])">
            <summary>
            Encrypts the input data using the secret key.
            </summary>
            <param name="dataForEncryption">The cipher text to be encrypted.</param>
            <returns>The resulting encryption of the dataForEncryption parameter in plain text.</returns>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.encrypt(System.Byte[],System.Int32)">
            <summary>
            Encrypts the input data using the secret key.
            </summary>
            <param name="dataForEncryption">The cipher text to be encrypted.</param>
            <param name="length">The maximum number of bytes to encrypt.</param>
            <returns>The resulting encryption of the dataForEncryption parameter in plain text.</returns>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.decrypt(System.Byte[])">
            <summary>
            Decrypts the input data using the secret key.
            </summary>
            <param name="dataForDecryption">The cipher text to be decrypted.</param>
            <returns>The resulting decryption of the dataForDecryption parameter in plain text.</returns>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.BinaryToBase64String(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.Base64StringToBinary(System.String)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.BinaryToString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.StringToBinary(System.String)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RC2Encryption.ExportKeyToFile(System.String)">
            <summary>
            Exports Key and IV of this TripleDESEncryption instance to a file.
            </summary>
            <param name="filename">The desired exported file name.</param>
            <returns>Retuens 0, if export operation has no error.</returns>
        </member>
        <member name="P:DotGrid.DotSec.RC2Encryption.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.RC2Encryption.Iv">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.RijndaelEncryption">
            <summary>
            A complete class for rijndael encryption.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of RijndaelEncryption with key and iv.
            </summary>
            <param name="key">The secret key for the symmetric algorithm.</param>
            <param name="IV">The initialization vector (IV) for the symmetric algorithm.</param>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of RijndaelEncryption with random generated key and iv and desired key size.
            </summary>
            <param name="KeySize">Desired key size.</param>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.#ctor">
            <summary>
            Initializes a new instance of RijndaelEncryption with random generated key and iv.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.encrypt(System.Byte[])">
            <summary>
            Encrypts the input data using the secret key.
            </summary>
            <param name="dataForEncryption">The cipher text to be encrypted.</param>
            <returns>The resulting encryption of the dataForEncryption parameter in plain text.</returns>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.encrypt(System.Byte[],System.Int32)">
            <summary>
            Encrypts the input data using the secret key.
            </summary>
            <param name="dataForEncryption">The cipher text to be encrypted.</param>
            <param name="length">The maximum number of bytes to encrypt.</param>
            <returns>The resulting encryption of the dataForEncryption parameter in plain text.</returns>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.decrypt(System.Byte[])">
            <summary>
            Decrypts the input data using the secret key.
            </summary>
            <param name="dataForDecryption">The cipher text to be decrypted.</param>
            <returns>The resulting decryption of the dataForDecryption parameter in plain text.</returns>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.BinaryToBase64String(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.Base64StringToBinary(System.String)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.BinaryToString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.StringToBinary(System.String)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.RijndaelEncryption.ExportKeyToFile(System.String)">
            <summary>
            Exports Key and IV of this RijndaelEncryption instance to a file.
            </summary>
            <param name="filename">The desired exported file name.</param>
            <returns>Retuens 0, if export operation has no error.</returns>
        </member>
        <member name="P:DotGrid.DotSec.RijndaelEncryption.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.RijndaelEncryption.Iv">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.RSA">
            <summary>
            A complete class for Asymetric RSA encryption algorithm.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.RSA.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of RSA with public key (e,n) and private key (d,n).
            </summary>
            <param name="dPrivate">dPrivate is known as the secret exponent or decryption exponent.</param>
            <param name="n">n is known as the modulus.</param>
            <param name="ePublic">ePublic is known as the public exponent or encryption exponent.</param>
        </member>
        <member name="M:DotGrid.DotSec.RSA.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of RSA with public key (e,n).
            </summary>
            <param name="ePublic">ePublic is known as the public exponent or encryption exponent.</param>
            <param name="n">n is known as the modulus.</param>
        </member>
        <member name="M:DotGrid.DotSec.RSA.#ctor">
            <summary>
            Initializes a new instance of RSA and generates random public-private keys.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.RSA.#ctor(System.Security.Cryptography.RSAParameters,System.Security.Cryptography.RSAParameters)">
            <summary>
            Initializes a new instance of RSA.
            </summary>
            <param name="PublicParams">Represents the public key for the RSA algorithm.</param>
            <param name="PrivatePramas">Represents the private key for the RSA algorithm.</param>
        </member>
        <member name="M:DotGrid.DotSec.RSA.EncryptData(System.Byte[])">
            <summary>
            Encrypts the input data using the private key.
            </summary>
            <param name="rgb">The cipher text to be encrypted.</param>
            <returns>The resulting encryption of the rgb parameter in plain text.</returns>
        </member>
        <member name="M:DotGrid.DotSec.RSA.EncryptData(System.Byte[],System.Int32)">
            <summary>
            Encrypts the input data using the private key.
            </summary>
            <param name="rgb">The cipher text to be encrypted.</param>
            <param name="length">The maximum number of bytes to encrypt.</param>
            <returns>The resulting encryption of the rgb parameter in plain text.</returns>
        </member>
        <member name="M:DotGrid.DotSec.RSA.DecryptData(System.Byte[])">
            <summary>
            Decrypts the input data using the private key.
            </summary>
            <param name="rgb">The cipher text to be decrypted.</param>
            <returns>The resulting decryption of the rgb parameter in plain text.</returns>
        </member>
        <member name="M:DotGrid.DotSec.RSA.HashAndSign(System.Byte[])">
            <summary>
            Manually performs hash and then signs hashed value.
            </summary>
            <param name="encrypted">Encrypted data.</param>
            <returns>Signature data.</returns>
        </member>
        <member name="M:DotGrid.DotSec.RSA.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Manually performs hash and then verifies hashed value.
            </summary>
            <param name="encrypted">Bytes of encrypted data</param>
            <param name="signature">Bytes of signature.</param>
            <returns>Teue if hash is verified.</returns>
        </member>
        <member name="P:DotGrid.DotSec.RSA.DPrivate">
            <summary>
            DPrivate is known as the secret exponent or decryption exponent.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.RSA.N">
            <summary>
            N is known as the modulus.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.RSA.EPublic">
            <summary>
            EPublic is known as the public exponent or encryption exponent.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.RSA.PublicParams">
            <summary>
            Get the public key for the algorithm instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.RSA.PrivateParams">
            <summary>
            Get the public key for the algorithm instance.
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.SecureBinaryReader">
            <summary>
            Reads a secure or none secure primitive data types as binary values in a specific encoding.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.#ctor(System.IO.Stream,DotGrid.DotSec.RijndaelEncryption)">
            <summary>
            Initializes a new instance of the SecureBinaryReader class based on the supplied stream and using UTF8Encoding.
            </summary>
            <param name="input">A stream. </param>
            <param name="rijndael">A RijndaelEncryption class for encrypting data.If this variable is null then this SecureBinaryReader will be changed to normal .NET BiranrReader class.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.#ctor(System.Net.Sockets.Socket,System.IO.Stream,DotGrid.DotSec.RijndaelEncryption,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="socket">Base socket of this instance.</param>
            <param name="input">A stream. </param>
            <param name="rijndael">A RijndaelEncryption class for encrypting data.If this variable is null then this SecureBinaryReader will be changed to normal .NET BiranrReader class.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.#ctor(System.IO.Stream,DotGrid.DotSec.RijndaelEncryption,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="input">A stream. </param>
            <param name="rijndael">A RijndaelEncryption class for encrypting data.If this variable is null then this SecureBinaryReader will be changed to normal .NET BiranrReader class.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.Close">
            <summary>
            Closes the current reader and the underlying stream.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.Dispose(System.Boolean)">
            <summary>
            Releases any consumed system resources.
            </summary>
            <param name="disposing">Disposing condition.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.PeekChar">
            <summary>
            Returns the next available character and does not advance the byte or character position.
            </summary>
            <returns>The next available character, or -1 if no more characters are available or the stream does not support seeking.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads count characters from the stream with index as the starting point in the character array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <param name="index">The starting point in the buffer at which to begin reading into the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The number of characters read into buffer.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.Read7BitEncodedInt">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.Read">
            <summary>
            Reads characters from the underlying stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.
            </summary>
            <returns>The next character from the input stream, or -1 if no characters are currently available.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadBoolean">
            <summary>
            Reads a Boolean value from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>true if the byte is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.FillBuffer(System.Int32)">
            <summary>
            
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads count bytes from the current stream into a byte array and advances the current position by count bytes.
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadChar">
            <summary>
            Reads the next character from the current stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.
            </summary>
            <returns>A character read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadChars(System.Int32)">
            <summary>
            Reads count characters from the current stream, returns the data in a character array, and advances the current position in accordance with the Encoding used and the specific character being read from the stream.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadDecimal">
            <summary>
            Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.
            </summary>
            <returns>A decimal value read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadSByte">
            <summary>
            Reads a signed byte from this stream and advances the current position of the stream by one byte.
            </summary>
            <returns>A signed byte read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadString">
            <summary>
            Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.
            </summary>
            <returns>The string being read.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using little endian encoding and advances the position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count bytes from the stream with index as the starting point in the byte array.
            </summary>
            <param name="value">The buffer to read data into.</param>
            <param name="index">The starting point in the buffer at which to begin reading into the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The number of characters read into buffer.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.Read(System.Byte[])">
            <summary>
            Reads 32 KB from the stream and copies count bytes from encrypted data with index as the starting point in the byte array if related methods request few bytes for reading and there are any data on stream, temproray this method reads tha data into m_buffer and hold it after new requset if the m_buffer the request replied from m_buffer if m_buffer will not be null.
            </summary>
            <param name="value">The buffer to read data into.</param>
            <returns>The number of characters read into buffer.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>The next byte read from the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadPacket(System.Byte[])">
            <summary>
            Reads and decrypt maximum 32 KB from the stream and copies count bytes from encrypted data with index as the starting point in the byte array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <returns>The number of characters read into buffer.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryReader.ReadSecurePacket(System.Byte[])">
            <summary>
            Reads and decrypt maximum 32 KB from the stream and copies count bytes from encrypted data with index as the starting point in the byte array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <returns>The number of characters read into buffer.</returns>
        </member>
        <member name="P:DotGrid.DotSec.SecureBinaryReader.BaseSocket">
            <summary>
             Exposes access to the underlying socket of the SecureBinaryReader.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.SecureBinaryReader.IsSecure">
            <summary>
            Gets whether this stream is in secure or non-secure mode.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.SecureBinaryReader.BaseStream">
            <summary>
            Exposes access to the underlying stream of the SecureBinaryReader.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.SecureBinaryReader.FromDownloadDirectoryClient">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.SecureBinaryWriter">
            <summary>
            Writes primitive types in binary to a secure stream and supports writing strings in a specific encoding.
            </summary>
        </member>
        <member name="F:DotGrid.DotSec.SecureBinaryWriter.OutStream">
            <summary>
            Base stream of this SecureBinaryWriter instance.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.#ctor(DotGrid.DotSec.RijndaelEncryption)">
            <summary>
            Initializes a new instance of the SecureBinaryWriter class that writes to a stream.
            </summary>
            <param name="rijndael">A RijndaelEncryption class for encrypting data.If this variable is null then this SecureBinaryReader will be changed to normal .NET BiranrWriter class.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.#ctor(System.IO.Stream,DotGrid.DotSec.RijndaelEncryption)">
            <summary>
            Initializes a new instance of the SecureBinaryWriter class based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The supplied stream. </param>
            <param name="rijndael">A RijndaelEncryption class for encrypting data.If this variable is null then this SecureBinaryReader will be changed to normal .NET BiranrWriter class.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.#ctor(System.IO.Stream,DotGrid.DotSec.RijndaelEncryption,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the SecureBinaryWriter class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream. </param>
            <param name="rijndael">A RijndaelEncryption class for encrypting data.If this variable is null then this SecureBinaryReader will be changed to normal .NET BiranrWriter class.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Close">
            <summary>
            Closes the current BinaryWriter and the underlying stream.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Dispose(System.Boolean)">
            <summary>
            Releases any consumed system resources.
            </summary>
            <param name="disposing">Disposing condition.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to origin.</param>
            <param name="origin">A field of SeekOrigin indicating the reference point from which the new position is to be obtained.</param>
            <returns>The position with the current stream.</returns>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream.
            </summary>
            <param name="value">A byte array containing the data to write.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed string to this stream in the current encoding of the BinaryWriter, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Write(System.Byte)">
            <summary>
            Writes an unsigned byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Write(System.Char)">
            <summary>
            Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.
            </summary>
            <param name="value">The character to write.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.
            </summary>
            <param name="value">A character array containing the data to write.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a byte array to the current stream.
            </summary>
            <param name="value">A byte array containing the data to write.</param>
            <param name="offset">The starting point in buffer at which to begin writing.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:DotGrid.DotSec.SecureBinaryWriter.WriteInternal(System.Byte[])">
            <summary>
            Writes a maximum DataSize byte array to the underlying stream.
            </summary>
            <param name="value">A byte array containing the data to write.</param>
        </member>
        <member name="P:DotGrid.DotSec.SecureBinaryWriter.IsSecure">
            <summary>
            Gets whether this stream is in secure or non-secure mode.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.SecureBinaryWriter.BaseStream">
            <summary>
            Gets the underlying stream of the BinaryWriter.
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.SecureDataHeader">
            <summary>
            A class for SecureDataHeader.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.SecureDataHeader.#ctor(System.Byte[],DotGrid.DotSec.RijndaelEncryption)">
            <summary>
            Initializes a new instance of the SecureDataHeader class.
            </summary>
            <param name="data">The data buffer for encryption.</param>
            <param name="rijndael">A RijndaelEncryption class for encrypting data.</param>
        </member>
        <member name="P:DotGrid.DotSec.SecureDataHeader.Buffer">
            <summary>
            Gets bytes of SecureDataHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.DotSec.TripleDESEncryption">
            <summary>
            A complete class for triple DES encryption.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of TripleDESEncryption with key and iv.
            </summary>
            <param name="key">The secret key for the symmetric algorithm.</param>
            <param name="IV">The initialization vector (IV) for the symmetric algorithm.</param>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of TripleDESEncryption with random generated key and iv and desired key size.
            </summary>
            <param name="KeySize">Desired key size.</param>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.#ctor">
            <summary>
            Initializes a new instance of RijndaelEncryption with random generated key and iv.
            </summary>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.encrypt(System.Byte[])">
            <summary>
            Encrypts the input data using the secret key.
            </summary>
            <param name="dataForEncryption">The cipher text to be encrypted.</param>
            <returns>The resulting encryption of the dataForEncryption parameter in plain text.</returns>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.encrypt(System.Byte[],System.Int32)">
            <summary>
            Encrypts the input data using the secret key.
            </summary>
            <param name="dataForEncryption">The cipher text to be encrypted.</param>
            <param name="length">The maximum number of bytes to encrypt.</param>
            <returns>The resulting encryption of the dataForEncryption parameter in plain text.</returns>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.decrypt(System.Byte[])">
            <summary>
            Decrypts the input data using the secret key.
            </summary>
            <param name="dataForDecryption">The cipher text to be decrypted.</param>
            <returns>The resulting decryption of the dataForDecryption parameter in plain text.</returns>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.BinaryToBase64String(System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.Base64StringToBinary(System.String)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.BinaryToString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.StringToBinary(System.String)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.DotSec.TripleDESEncryption.ExportKeyToFile(System.String)">
            <summary>
            Exports Key and IV of this TripleDESEncryption instance to a file.
            </summary>
            <param name="filename">The desired exported file name.</param>
            <returns>Retuens 0, if export operation has no error.</returns>
        </member>
        <member name="P:DotGrid.DotSec.TripleDESEncryption.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
        </member>
        <member name="P:DotGrid.DotSec.TripleDESEncryption.Iv">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
        </member>
        <member name="T:DotGrid.DotThreading.DotGridThreadClient">
            <summary>
            States a remote thread on DotGridThreadServer. Use this class only for a thread. Don't build much more than one instance of this class for one application, in this cases use the ThreadCollectionClient class.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.#ctor(System.Threading.ThreadStart,System.Reflection.Module[],System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Initializes a new instance of the DotGridThreadClient class.
            </summary>
            <param name="start">A ThreadStart delegate that references the methods to be invoked when this thread begins executing.</param>
            <param name="modules">States modules that are depended to start parameter for convenient remote assembly loading.</param>
            <param name="DotGridThreadServerAddress">DotGridThreadClient server address.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination dotDfs server.</param>
            <param name="Secure">Determine secure or secureless connection.</param>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.InitializeThread">
            <summary>
            Creates remote thread.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Start">
            <summary>
            Causes the operating system to change the state of the current instance to ThreadState.Running
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Abort">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.StartInternal">
            <summary>
            Executes the remote thread and returns the processed result that states modified received instance.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.PublicKeyAuthentication(System.Net.Sockets.NetworkStream)">
            <summary>
            Does public key authentication.
            </summary>
            <param name="ns">Network stream.</param>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.ReceiveObject">
            <summary>
            Receives an object from network stream.
            </summary>
            <returns>Returned object from network stream.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.SendObject(System.Object)">
            <summary>
            Sends an object to network stream.
            </summary>
            <param name="obj">Favorite object for sending to network stream.</param>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.AuthenticationHeaderBuilder(System.String,System.String)">
            <summary>
            Builds AuthenticationHeader filed for user login.
            </summary>
            <param name="username">Username of the user.</param>
            <param name="password">Password of the user.</param>
            <returns>bytes of AuthenticationHeader.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.InsertStringToBuffer(System.String,System.Byte[],System.Int32)">
            <summary>
            Insert the str to buffer with the initial index of buffer.
            </summary>
            <param name="str">Desried string for inserting to buffer, str must be ASCFII String.</param>
            <param name="buffer">Buffer stream.</param>
            <param name="index">Starting position in buffer for inserting str onto buffer.</param>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.ExceptionResponse">
            <summary>
            Investigates if server reply with an exception response then an exception will be dropped.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.ConnectionClose">
            <summary>
            Close the connected connection to remote server.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Read(System.Byte[],System.Int32)">
            <summary>
            Reads any length buffer from SecureBinaryReader stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes any length buffer to SecureBinaryReader stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads maximum 32KB or 64KB length buffer from SecureBinaryReader stream.
            </summary>
            <param name="array">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Receive(System.Int32)">
            <summary>
            Reads a maximum of n bytes from the current network stream into buffer and return it.
            </summary>
            <param name="n">states n bytes for reading from network stream</param>
            <returns>Return received buffer data, if there are'nt no data then null will be returned.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count bytes from the stream with offset as the starting point in the byte array.
            </summary>
            <param name="array">The array to read data into.</param>
            <param name="offset">The starting point in the buffer at which to begin reading into the array.</param>
            <param name="count">The number of bytes to read.</param>
            <returns>The number of characters read into buffer. This might be less than the number of bytes requested if that many bytes are not available, or it might be -1 if there is an error.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.ReceiveByte">
            <summary>
            Reads a bytes from the current network stream into buffer and return it.
            </summary>
            <returns>Return received buffer data.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Send(System.Byte[])">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Send(System.Byte)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.DotGridThreadClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes to the network stream.
            </summary>
            <param name="buffer">buffer for writing to network stream.</param>
            <param name="offset">The starting point in buffer at which to begin writing. </param>
            <param name="count">The number of bytes to write.</param>
            <returns>If any errors occurred, -1 will be returned otherwise 0.</returns>
        </member>
        <member name="P:DotGrid.DotThreading.DotGridThreadClient.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
        </member>
        <member name="P:DotGrid.DotThreading.DotGridThreadClient.ReturnedObject">
            <summary>
            Gets returned object by server achieved by remote thread execution. 
            </summary>
        </member>
        <member name="T:DotGrid.DotThreading.ThreadCollectionClient">
            <summary>
            Executes a thread collection like a multi-threaded application.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadCollectionClient.#ctor(System.Threading.ThreadStart[],System.Reflection.Module[],System.String,System.Net.NetworkCredential,System.Boolean)">
            <summary>
            Initializes a new instance of the ThreadCollectionClient class.
            </summary>
            <param name="starts">A ThreadStart collection delegate that references the methods to be invoked when this thread collection begins executing.</param>
            <param name="modules">States modules that are depended to start parameter for convenient remote assembly loading.</param>
            <param name="DotGridThreadServerAddress">DotGridThreadClient server address.</param>
            <param name="nc">Provides credentials for password-based authentication schemes to destination dotDfs server.</param>
            <param name="Secure">Determine secure or secureless connection.</param>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadCollectionClient.Start">
            <summary>
            Causes the operating system to change the state of the current instance to ThreadState.Running
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadCollectionClient.Abort">
            <summary>
            Raises a ThreadAbortException in the thread on which it is invoked, to begin the process of terminating the thread. Calling this method usually terminates the thread.
            </summary>
        </member>
        <member name="P:DotGrid.DotThreading.ThreadCollectionClient.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
        </member>
        <member name="P:DotGrid.DotThreading.ThreadCollectionClient.ReturnedObjects">
            <summary>
            Gets returned objects by server achieved by remote threads execution. 
            </summary>
        </member>
        <member name="T:DotGrid.DotThreading.ThreadCollectionExecutor">
            <summary>
            Executes a thread collection requested by client.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadCollectionExecutor.#ctor(System.Threading.ThreadStart[])">
            <summary>
            
            </summary>
            <param name="starts"></param>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadCollectionExecutor.Run">
            <summary>
            Runs the thread collection.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadCollectionExecutor.SetIsAborted(System.Boolean@)">
            <summary>
            
            </summary>
            <param name="IsAborted"></param>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadCollectionExecutor.Abort(System.Threading.Thread[])">
            <summary>
            
            </summary>
            <param name="threads"></param>
        </member>
        <member name="P:DotGrid.DotThreading.ThreadCollectionExecutor.Starts">
            <summary>
            
            </summary>
        </member>
        <member name="T:DotGrid.DotThreading.ThreadExecutor">
            <summary>
            Executes a thread or thread collection requested by client.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadExecutor.#ctor">
            <summary>
            Constructor for ThreadExecutor class.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadExecutor.ExecuteThread(System.String,System.Byte[],System.Boolean@,System.Object)">
            <summary>
            Executes thread.
            </summary>
            <param name="methodName">String name of method to execute.</param>
            <param name="Obj">Binary representation of the remote object.</param>
            <param name="IsAborted">Determines aborted thread collection by the client.</param>
            <param name="permission">Needed permissions to run the thread or thread collection.</param>
            <returns>Executed result.</returns>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadExecutor.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotGrid.DotThreading.ModuleInfo">
            <summary>
            A class for module information.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.ModuleInfo.#ctor(System.String,System.String)">
            <summary>
            Constructor for ModuleInfo class.
            </summary>
            <param name="FullyQualifiedName">A string representing the fully qualified name and path to this module.</param>
            <param name="ScopeName">A string representing the name of the module.</param>
        </member>
        <member name="P:DotGrid.DotThreading.ModuleInfo.FullyQualifiedName">
            <summary>
            Gets a string representing the fully qualified name and path to this module.
            </summary>
        </member>
        <member name="P:DotGrid.DotThreading.ModuleInfo.ScopeName">
            <summary>
            Gets a string representing the name of the module.
            </summary>
        </member>
        <member name="T:DotGrid.DotThreading.ThreadInfo">
            <summary>
            States remote thread information.
            </summary>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadInfo.#ctor(System.Threading.ThreadStart,System.Reflection.Module[])">
            <summary>
            Initialize ThreadInfo instance.
            </summary>
            <param name="start">A ThreadStart delegate that references the methods to be invoked when the related thread instance begins executing.</param>
            <param name="modules">States modules that are depended to start parameter for convenient remote assembly loading.</param>
        </member>
        <member name="M:DotGrid.DotThreading.ThreadInfo.SortUniqeModules(System.Reflection.Module[])">
            <summary>
            Sorts and modifies unique modules and returns new sorted and modified modules.
            </summary>
            <param name="modules">Modules for sorting and modifying.</param>
            <returns>Sorted and modified modules.</returns>
        </member>
        <member name="P:DotGrid.DotThreading.ThreadInfo.Obj">
            <summary>
            Gets data object of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotThreading.ThreadInfo.GUID">
            <summary>
            Gets guid of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotThreading.ThreadInfo.Start">
            <summary>
            Gets start name of this instance.
            </summary>
        </member>
        <member name="P:DotGrid.DotThreading.ThreadInfo.Modules">
            <summary>
            Gets modules of this instance.
            </summary>
        </member>
        <member name="T:DotGrid.gDSM.gDsmClient">
            <summary>
            Summary description for gDsmClient.
            </summary>
        </member>
        <member name="M:DotGrid.gDSM.gDsmClient.#ctor(System.Object,System.IO.FileAccess,System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="access"></param>
            <param name="manager"></param>
            <param name="nodes"></param>
        </member>
        <member name="P:DotGrid.gDSM.gDsmClient.GUID">
            <summary>
            Gets unique ID of this shared object on gDsm.
            </summary>
        </member>
        <member name="T:DotGrid.gDSM.ConsistencyModel">
            <summary>
            An interface for gDsm Consistency Model.
            </summary>
        </member>
        <member name="M:DotGrid.gDSM.ConsistencyModel.Read">
            <summary>
            Reads an object of gDsm stream.
            </summary>
            <returns>The read object. If null is returned, there might be an error.</returns>
        </member>
        <member name="M:DotGrid.gDSM.ConsistencyModel.Write(System.Object)">
            <summary>
            Writes wr object to gDsm stream.
            </summary>
            <param name="wr">The object to write.</param>
            <returns></returns>
        </member>
        <member name="M:DotGrid.gDSM.ConsistencyModel.Lock">
            <summary>
            Locks the the object on gDsm based on the used Consistency Model..
            </summary>
            <returns>True if the lock operation has been succeed.</returns>
        </member>
        <member name="M:DotGrid.gDSM.ConsistencyModel.Unlock">
            <summary>
            Unlocks the the object on gDsm based on the used Consistency Model.
            </summary>
            <returns>True if the Unlock operation has been succeed.</returns>
        </member>
        <member name="P:DotGrid.gDSM.ConsistencyModel.Guid">
            <summary>
            Gets unique ID of the shared object on gDsm.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.ConsistencyModel.Writable">
            <summary>
            Gets a value indicating whether the current shared object on gDsm supports writing.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.ConsistencyModel.Readable">
            <summary>
            Gets a value indicating whether the current shared object on gDsm supports reading.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.ConsistencyModel.Locked">
            <summary>
            Gets a value indicating whether the current shared object on gDsm locked.
            </summary>
        </member>
        <member name="T:DotGrid.gDSM.SharedObjectInfo">
            <summary>
            A class for shared object information on gDsm.
            </summary>
        </member>
        <member name="M:DotGrid.gDSM.SharedObjectInfo.#ctor(System.Object,System.String,System.String,System.String[],System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the SharedObjectInfo class.
            </summary>
            <param name="obj">The main object to share on gDsm</param>
            <param name="guid">Unique ID of this shared object on gDsm.</param>
            <param name="owner">Address of the owner of this shared object.</param>
            <param name="nodes">Specifies the participating nodes on current gDsm.</param>
            <param name="access">Defines constants for read, write, or read/write access to this shared object on gDsm.</param>
        </member>
        <member name="M:DotGrid.gDSM.SharedObjectInfo.AddNode(System.String)">
            <summary>
            Adds a new node to list of users of this shared object on gDsm.
            </summary>
            <param name="node">Address of new user node.</param>
            <returns>If the node has not been existed then true will be returned.</returns>
        </member>
        <member name="M:DotGrid.gDSM.SharedObjectInfo.RemoveNode(System.String)">
            <summary>
            Removes a available node from list of users of this shared object on gDsm.
            </summary>
            <param name="node">Address of a user node.</param>
            <returns>If the node has not been existed then true will be returned.</returns>
        </member>
        <member name="P:DotGrid.gDSM.SharedObjectInfo.NodeUsers">
            <summary>
            Gets all nodes using this shared memory instance on gDsm.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.SharedObjectInfo.IsLocked">
            <summary>
            Gets or sets Locked or UnLocked state of this shared object on gDsm.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.SharedObjectInfo.Access">
            <summary>
            Gets or sets read, write, or read/write access to this shared object on gDsm.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.SharedObjectInfo.SharedObject">
            <summary>
            Gets binary form of this shared object.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.SharedObjectInfo.GUID">
            <summary>
            Gets unique ID of this shared object on gDsm.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.SharedObjectInfo.Owner">
            <summary>
            Gets the owner address of this shared object.
            </summary>
        </member>
        <member name="P:DotGrid.gDSM.SharedObjectInfo.Nodes">
            <summary>
            Gets the nodes that are participating for this shared object on related gDsm topology deployment.
            </summary>
        </member>
        <member name="T:DotGrid.NewDotSec.DotSecStream">
            <summary>
            Summary description for DotSecStream.
            </summary>
        </member>
        <member name="F:DotGrid.NewDotSec.DotSecStream.rijndael">
            <summary>
            
            </summary>
        </member>
        <member name="M:DotGrid.NewDotSec.DotSecStream.#ctor(System.Net.Sockets.Socket,DotGrid.DotSec.RijndaelEncryption)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="rijndael"></param>
        </member>
        <member name="M:DotGrid.NewDotSec.DotSecStream.WriteByte(System.Byte)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:DotGrid.NewDotSec.DotSecStream.WriteObject(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:DotGrid.NewDotSec.DotSecStream.ReadObject">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotGrid.NewDotSec.DotSecStream.ReadByte">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotGrid.NewDotSec.DotSecStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="length"></param>
        </member>
        <member name="M:DotGrid.NewDotSec.DotSecStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="index"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:DotGrid.Serialization.SerializeDeserialize">
            <summary>
            A class for binary data serialization and deserialization.
            </summary>
        </member>
        <member name="M:DotGrid.Serialization.SerializeDeserialize.Serialize(System.Object)">
            <summary>
            Serialize the obj.
            </summary>
            <param name="obj">The object for serialization.</param>
            <returns>Binary serialized object data.</returns>
        </member>
        <member name="M:DotGrid.Serialization.SerializeDeserialize.DeSerialize(System.Byte[])">
            <summary>
            Deserialize the obj binary format.
            </summary>
            <param name="obj">Binary representation of the object.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.CanSeekEnum">
            <summary>
            Enum for CanSeek.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.CanSeekEnum.TRUE">
            <summary>
             The stream supports seeking.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.CanSeekEnum.FALSE">
            <summary>
            false if the stream is closed or if the FileStream was constructed from an operating-system handle such as a pipe or output to the console.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods">
            <summary>
            Enum for DotDFS.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.CloseTransferChannel">
            <summary>
            Meaning closing channel by client in current DotDFS session.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.DownloadFile">
            <summary>
            Meaning downloading a single file in DotDFS session.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.UploadFile">
            <summary>
            Meaning uploading a single file in DotDFS session.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.CreateDirectory">
            <summary>
            Meaning creation of all directories and subdirectories as specified by path on the DotDFS server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.DeleteDirectory">
            <summary>
            Meaning deletion a directory and its contents on the DotDFS server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.DeleteFile">
            <summary>
            Meaning deletion a file on the DotDFS server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.ExistsDirectory">
            <summary>
            Meaning whether the given path refers to an existing directory on DotDFS server disk.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.ExistsFile">
            <summary>
            Meaning whether the given path refers to an existing file on DotDFS server disk.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.GetCurrentDirectory">
            <summary>
            Meaning getting the current working directory of the application on DotDFS server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.GetDirectories">
            <summary>
            Meaning getting the names of subdirectories in the specified directory on DotDFS server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.MoveDirectory">
            <summary>
            Meaning moving a directory tree on the DotDFS session from client to server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.MoveFile">
            <summary>
            Meaning moving a file on the DotDFS session from client to server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.GetFiles">
            <summary>
            Meaning getting the names of files in the specified directory on DotDFS server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.DirectoryMovementMethods.GetFileSize">
            <summary>
            Meaning getting the size of a specified file on DotDFS server.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.LongMode">
            <summary>
            Enum for LongMode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.LongMode.INT8">
            <summary>
            Meaning l = 1   (l is numbers of bytes of value field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.LongMode.INT16">
            <summary>
            Meaning l = 2   (l is numbers of bytes of value field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.LongMode.INT24">
            <summary>
            Meaning l = 3   (l is numbers of bytes of value field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.LongMode.INT32">
            <summary>
            Meaning l = 4   (l is numbers of bytes of value field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.LongMode.INT40">
            <summary>
            Meaning l = 5   (l is numbers of bytes of value field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.LongMode.INT48">
            <summary>
            Meaning l = 6   (l is numbers of bytes of value field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.LongMode.INT56">
            <summary>
            Meaning l = 7   (l is numbers of bytes of value field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.LongMode.INT64">
            <summary>
            Meaning l = 8   (l is numbers of bytes of value field.)
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.Method">
            <summary>
            Enum for Method.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.Read">
            <summary>
            Read to file mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.Write">
            <summary>
            Write to file mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.Flush">
            <summary>
            Flush mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.Lock">
            <summary>
            Lock mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.Seek">
            <summary>
            Seek mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.Close">
            <summary>
            Close mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.SetLength">
            <summary>
            SetLength mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.UnLock">
            <summary>
            UnLock mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.Position">
            <summary>
            Position mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.Length">
            <summary>
            Length mode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.Method.CanSeek">
            <summary>
            CanSeek mode.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.PathEncoding">
            <summary>
            Enum for PathEncoding.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.PathEncoding.ASCII">
            <summary>
            Represents an ASCII character encoding of Unicode characters.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.PathEncoding.UTF7">
            <summary>
            Represents a UTF-7 character encoding of Unicode characters.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.PathEncoding.UTF8">
            <summary>
            Represents a UTF-8 character encoding of Unicode characters.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.PathEncoding.UTF16">
            <summary>
            Represents a UTF-16 character encoding of Unicode characters.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.PathMode">
            <summary>
            Enum for PathMode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.PathMode.INT8">
            <summary>
            Meaning l = 1   (l is numbers of bytes of PathLength field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.PathMode.INT16">
            <summary>
            Meaning l = 2   (l is numbers of bytes of PathLength field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.PathMode.INT24">
            <summary>
            Meaning l = 3   (l is numbers of bytes of PathLength field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.PathMode.INT32">
            <summary>
            Meaning l = 4   (l is numbers of bytes of PathLength field.)
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.RWMode">
            <summary>
            Enum for RWMode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.RWMode.INT8">
            <summary>
            Meaning l = 1   (l is numbers of bytes of buffer field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.RWMode.INT16">
            <summary>
            Meaning l = 2   (l is numbers of bytes of buffer field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.RWMode.INT24">
            <summary>
            Meaning l = 3   (l is numbers of bytes of buffer field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.RWMode.INT32">
            <summary>
            Meaning l = 4   (l is numbers of bytes of buffer field.)
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.ServerMode">
            <summary>
            Enum for ServerMode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.ServerMode.DFS">
            <summary>
            The mode of this session is the normal DotDFS distributed file system.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.ServerMode.FileTransfer">
            <summary>
            The mode of this session is the normal DotDFS File Transfer.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.TransferChannelMode">
            <summary>
            Enum for DotDFS.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.TransferChannelMode.SingleFileTransferUploadFromClient">
            <summary>
            Meaning transferring a single file on the DotDFS session from client to server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.TransferChannelMode.SingleFileTransferDownloadFromClient">
            <summary>
            Meaning transferring a single file on the DotDFS session from server to client.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.TransferChannelMode.DirectoryMovementUploadFromClient">
            <summary>
            Meaning moving a directory tree on the DotDFS session from client to server.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.TransferChannelMode.FileStreamFromClient">
            <summary>
            Meaning moving a FileStream request on the DotDFS session from client to server.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotDFS.TransferMode">
            <summary>
            Enum for TransferMode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.TransferMode.DotDFS">
            <summary>
            The mode of this session is the proposed DotDFS Protocol headers.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotDFS.TransferMode.GridFTP">
            <summary>
            The mode of this session is the GridFTP V1 Extended Block Mode.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.gDsm.gDsmMethods">
            <summary>
            Enum for gDsmMethods.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.gDsm.gDsmMethods.CreateNew">
            <summary>
            Meaning new creation of new shared object.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.gDsm.gDsmMethods.ObjectExists">
            <summary>
            Searches existing shared object with the related GUID.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.ClientAuthenticationError">
            <summary>
            Euom for ClientAuthenticationError.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.ClientAuthenticationError.OK">
            <summary>
            Successfully authenticated.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.ClientAuthenticationError.NO">
            <summary>
            Username or Passwrod is wrong.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.ClientAuthenticationError.BAD">
            <summary>
            Bad format for n bytes of username and m bytes of password (buffer.Length != 2+n+m and buffer.Length les than 2)
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotGridThreadServerMode">
            <summary>
            Enum for DotGridThreadServerMode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotGridThreadServerMode.DotGridThreadServerMode">
            <summary>
             Specifies DotGridThreadServer mode for DotGridThreadServer.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotGridThreadServerMode.DotGridRemoteProcessServerMode">
            <summary>
            Specifies DotGridRemoteProcessServerMode mode for DotGridThreadServer.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.DotRemoteProcessMethod">
            <summary>
            Enum for Method.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotRemoteProcessMethod.Start">
            <summary>
            Specifies Start method.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotRemoteProcessMethod.Kill">
            <summary>
            Specifies Kill method.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotRemoteProcessMethod.Refresh">
            <summary>
            Specifies Refresh method.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotRemoteProcessMethod.RemoteProcessInfo">
            <summary>
            Specifies RemoteProcessInfo property.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotRemoteProcessMethod.ExitTime">
            <summary>
            Specifies RemoteProcess.ExitTime property.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotRemoteProcessMethod.GetRemoteProcesses">
            <summary>
            Specifies GetRemoteProcess method.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotRemoteProcessMethod.KillById">
            <summary>
            Specifies KillById method.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.DotRemoteProcessMethod.GetRemoteProcessInfoById">
            <summary>
            Specifies GetRemoteProcessInfoById method.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.EMode">
            <summary>
            Enum for EMode.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.EMode.INT8">
            <summary>
            Meaning l = 1   (l is numbers of bytes of ELength field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.EMode.INT16">
            <summary>
            Meaning l = 2   (l is numbers of bytes of ELength field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.EMode.INT24">
            <summary>
            Meaning l = 3   (l is numbers of bytes of ELength field.)
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.EMode.INT32">
            <summary>
            Meaning l = 4   (l is numbers of bytes of ELength field.)
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.Encryption">
            <summary>
            Enum for Encryption.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.Encryption.RIJNDAEL">
            <summary>
            Meaning rijndael encryption algorithm.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.Encryption.T3DES">
            <summary>
            Meaning TripleDES encryption algorithm.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Enums.eXception">
            <summary>
            Enum for Exception.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.eXception.OK">
            <summary>
            Meaning an exception has occurred.
            </summary>
        </member>
        <member name="F:DotGrid.Shared.Enums.eXception.NO">
            <summary>
            Meaning no exception has occurred.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.DotDFS.ExceptionHandlingHeader">
            <summary>
            A class for ExceptionHandlingHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.ExceptionHandlingHeader.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ExceptionHandlingHeader class.
            </summary>
            <param name="e">An dropped exception by the system.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.ExceptionHandlingHeader.Buffer">
            <summary>
            Gets bytes of ExceptionHandlingHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.DotDFS.FileStreamHeader">
            <summary>
            A class for FileStreamHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.FileStreamHeader.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,DotGrid.Shared.Enums.DotDFS.PathEncoding)">
            <summary>
            Initializes a new instance of the FileStreamHeader class.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes.</param>
            <param name="encoding">A PathEncoding constant that determines how the path file will be encoded by processes.</param>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.FileStreamHeader.GetHeader(System.Byte[])">
            <summary>
            Finds a FileStreamHeader instance from the inpit buffer, if there are any error then the method trow an exception with detailed error message. 
            </summary>
            <param name="buffer">Input buffer for contructing a FileStreamHeader instance.</param>
            <returns>A FileStreamHeader instance built based on input buffer.</returns>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.FileStreamHeader.Path">
            <summary>
            A relative or absolute path for the file that the current FileStream object will encapsulate.
            </summary>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.FileStreamHeader.FileMode">
            <summary>
            A FileMode constant that determines how to open or create the file.
            </summary>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.FileStreamHeader.FileAccess">
            <summary>
            A FileAccess constant that determines how the file can be accessed by the FileStream object.
            </summary>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.FileStreamHeader.FileShare">
            <summary>
            A FileShare constant that determines how the file will be shared by processes.
            </summary>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.FileStreamHeader.PathEncoding">
            <summary>
            A PathEncoding constant that determines how the path file will be encoded by processes
            </summary>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.FileStreamHeader.Buffer">
            <summary>
            Gets bytes of FileStreamHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.DotDFS.LockUnlockHeader">
            <summary>
            A class for LockUnlockHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.LockUnlockHeader.#ctor(System.Boolean,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the LockUnlockHeader class.
            </summary>
            <param name="Lock">If Lock is true then this header will be LockHeader, otherwise is UnlockHeader.</param>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0).</param>
            <param name="length">The range to be locked.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.LockUnlockHeader.Buffer">
            <summary>
            Gets bytes of LockUnlockHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.DotDFS.LongValueHeader">
            <summary>
            A class for LongValueHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.LongValueHeader.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the LongValueHeader class.
            </summary>
            <param name="value">Long number value.</param>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.LongValueHeader.GetBytesOfLongNumber(System.UInt64)">
            <summary>
            Get bytes of an unsigned long number.
            </summary>
            <param name="value">Value.</param>
            <returns>Bytes of value.</returns>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.LongValueHeader.GetBytesOfLongNumberForGridFTPMode(System.Byte[]@,System.UInt64)">
            <summary>
            Get bytes of an unsigned long number for DotDFS GridFTPMode transfer.
            </summary>
            <param name="buffer">A reference buffer with 8 bytes length.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.LongValueHeader.GetLongNumberFromBytes(System.Byte[])">
            <summary>
            Gets an unsigned long number from input buffer.
            </summary>
            <param name="buffer">Input buffer.</param>
            <returns>Unsigned long number.</returns>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.LongValueHeader.GetLongNumberFromBytesForGridFTPMode(System.Byte[])">
            <summary>
            Gets an unsigned long number from input buffer for DotDFS GridFTPMode transfer.
            </summary>
            <param name="buffer">Input buffer.</param>
            <returns>Unsigned long number.</returns>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.LongValueHeader.Buffer">
            <summary>
            Gets bytes of LongValueHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.DotDFS.ReadWriteHeader">
            <summary>
            A class for for ReadWriteHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.ReadWriteHeader.#ctor(System.Int32,DotGrid.Shared.Enums.DotDFS.Method)">
            <summary>
            Initializes a new instance of the ReadWriteHeader class.
            </summary>
            <param name="BufferLength">Length of buffer field.</param>
            <param name="method">Specify Method filed of ReadWriteHeader.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.ReadWriteHeader.Buffer">
            <summary>
            Gets bytes of ReadWriteHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.DotDFS.RSAPublicHeader">
            <summary>
            Summary description for RSAPublicHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.RSAPublicHeader.#ctor(DotGrid.DotSec.RSA)">
            <summary>
            Initializes a new instance of the RSAPublicHeader class.
            </summary>
            <param name="ServerRSA">States RSA public key (e,n) of server.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.RSAPublicHeader.Buffer">
            <summary>
            Gets bytes of RSAPublicHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.DotDFS.SeekHeader">
            <summary>
            A class for SeekHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.SeekHeader.#ctor(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Initializes a new instance of the LockUnlockHeader class.
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.SeekHeader.Buffer">
            <summary>
            Gets bytes of LockUnlockHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.DotDFS.SetLengthHeader">
            <summary>
            A class for SetLengthHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.DotDFS.SetLengthHeader.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the SetLengthHeader class.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.DotDFS.SetLengthHeader.Buffer">
            <summary>
            Gets bytes of SetLengthHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.ExceptionHandlingHeader">
            <summary>
            A class for ExceptionHandlingHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.ExceptionHandlingHeader.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the ExceptionHandlingHeader class.
            </summary>
            <param name="e">An dropped exception by the system.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.ExceptionHandlingHeader.Buffer">
            <summary>
            Gets bytes of ExceptionHandlingHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.RSAPublicHeader">
            <summary>
            Summary description for RSAPublicHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.RSAPublicHeader.#ctor(DotGrid.DotSec.RSA)">
            <summary>
            Initializes a new instance of the RSAPublicHeader class.
            </summary>
            <param name="ServerRSA">States RSA public key (e,n) of server.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.RSAPublicHeader.Buffer">
            <summary>
            Gets bytes of RSAPublicHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Shared.Headers.SharedKeyHeader">
            <summary>
            Summary description for SharedKeyHeader.
            </summary>
        </member>
        <member name="M:DotGrid.Shared.Headers.SharedKeyHeader.#ctor(System.Boolean,DotGrid.DotSec.RSA,DotGrid.DotSec.RijndaelEncryption)">
            <summary>
            Initializes a new instance of the SetLengthHeader class.
            </summary>
            <param name="Secure">Determines secure or secureless connection.</param>
            <param name="ServerRSA">States RSA public key (e,n) of server.</param>
            <param name="rijndael">Shows shared key with clinet and server.</param>
        </member>
        <member name="P:DotGrid.Shared.Headers.SharedKeyHeader.Buffer">
            <summary>
            Gets bytes of  SharedKeyHeader instance.
            </summary>
        </member>
        <member name="T:DotGrid.Constants">
            <summary>
            Summary description for Constants.
            </summary>
        </member>
    </members>
</doc>
