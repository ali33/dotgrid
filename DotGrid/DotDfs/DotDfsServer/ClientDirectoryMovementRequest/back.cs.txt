using System;
using System.IO;
using System.Threading;
using System.Net.Sockets;
using System.Collections;

using DotGrid.Net;
using DotGrid.DotDfs;
using DotGrid.Shared.Enums.DotDFS;

namespace DotDfs.FileTransferServer
{
	/// <summary>
	/// Summary description for Session.
	/// </summary>
	public class ClientDirectoryMovementRequest
	{
		private DotGridSocket socket;
		private long lastOffset = 0;
		private long lastLength = 0;
		//**************************************************************************************************************//
		public ClientDirectoryMovementRequest(DotGridSocket socket)
		{
			this.socket = socket;
		}
		//**************************************************************************************************************//
		public void Run()
		{
			Console.WriteLine("---------------------------------------------------------");
			//Console.WriteLine("New DotDFS file transfer session.");
			while(true)
			{
				DirectoryMovementMethods method;
				try { method = (DirectoryMovementMethods)socket.ReadByte(); }
				catch { return ; }
				switch(method)
				{
					case DirectoryMovementMethods.CloseTransferChannel:
						return;
					case DirectoryMovementMethods.CreateDirectory:
						if(CreateDirectory() == -1)
							return;
						else break;
					case DirectoryMovementMethods.DeleteDirectory:
						if(DeleteDirectory() == -1)
							return;
						else break;
					case DirectoryMovementMethods.DeleteFile:
						if(DeleteFile() == -1)
							return;
						else break;
					case DirectoryMovementMethods.ExistsDirectory:
						if(ExistsDirectory() == -1)
							return;
						else break;
					case DirectoryMovementMethods.ExistsFile:
						if(ExistsFile() == -1)
							return;
						else break;
					case DirectoryMovementMethods.GetCurrentDirectory:
						if(GetCurrentDirectory() == -1)
							return;
						else break;
					case DirectoryMovementMethods.GetDirectories:
						if(GetDirectories() == -1)
							return;
						else break;
					case DirectoryMovementMethods.GetFiles:
						if(GetFiles() == -1)
							return;
						else break;
					case DirectoryMovementMethods.MoveDirectory:
						if(MoveDirectory() == -1)
							return;
						else break;
					case DirectoryMovementMethods.MoveFile:
						if(MoveFile() == -1)
							return;
						else break;
					case DirectoryMovementMethods.DownloadFile:
						if(DownloadFile() == -1)
							return;
						else break;
					case DirectoryMovementMethods.UploadFile:
						if(UploadFile() == -1)
							return;
						else break;
					default:
						try { socket.WriteException(new ArgumentException("Directory movement method not supported.")); break; }
						catch { return; }
				}
			}
		}
		//**************************************************************************************************************//
		private int CreateDirectory()
		{
			string path;
			try { path = (string)socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { Directory.CreateDirectory(path); }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { socket.WriteNoException(); return 0; }
			catch { return -1; }
		}
		//**************************************************************************************************************//
		private int DeleteDirectory()
		{
			string path;
			try { path = (string)socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { Directory.Delete(path, true); }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { socket.WriteNoException(); return 0; }
			catch { return -1; }
		}
		//**************************************************************************************************************//
		private int DeleteFile()
		{
			string path;
			try { path = (string)socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { File.Delete(path); }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { socket.WriteNoException(); return 0; }
			catch { return -1; }
		}
		//**************************************************************************************************************//
		private int ExistsDirectory()
		{
			string path;
			try { path = (string)socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try 
			{ 
				byte exists = 0;
				if(Directory.Exists(path))
					exists = 1;
				try { socket.WriteNoException(); }
				catch { return -1; }
				try { socket.WriteByte(exists); return 0; }
				catch {return -1; }
			}
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
		}
		//**************************************************************************************************************//
		private int ExistsFile()
		{
			string path;
			try { path = (string)socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try 
			{ 
				byte exists = 0;
				if(File.Exists(path))
					exists = 1;
				try { socket.WriteNoException(); }
				catch { return -1; }
				try { socket.WriteByte(exists); return 0; }
				catch {return -1; }
			}
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
		}
		//**************************************************************************************************************//
		private int GetCurrentDirectory()
		{
			try 
			{
				string path = Directory.GetCurrentDirectory();
				try { socket.WriteNoException(); }
				catch { return -1; }
				try { socket.WriteObject(path); return 0; }
				catch {return -1; }
			}
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
		}
		//**************************************************************************************************************//
		private int GetDirectories()
		{
			string path;
			try { path = (string)socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try 
			{
				string[] dirs = Directory.GetDirectories(path);
				try { socket.WriteNoException(); }
				catch { return -1; }
				try { socket.WriteObject(dirs); return 0; }
				catch {return -1; }
			}
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
		}
		//**************************************************************************************************************//
		private int GetFiles()
		{
			string path;
			try { path = (string)socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try 
			{
				string[] files = Directory.GetFiles(path);
				try { socket.WriteNoException(); }
				catch { return -1; }
				try { socket.WriteObject(files); return 0; }
				catch {return -1; }
			}
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
		}
		//**************************************************************************************************************//
		private int MoveDirectory()
		{
			string[] path;
			try { path = (string[])socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { Directory.Move(path[0], path[1]); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { socket.WriteNoException(); return 0;}
			catch { return -1; }
		}
		//**************************************************************************************************************//
		private int MoveFile()
		{
			string[] path;
			try { path = (string[])socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { File.Move(path[0], path[1]); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { socket.WriteNoException(); return 0;}
			catch { return -1; }
		}
		//**************************************************************************************************************//
		private int DownloadFile()
		{
			return 0;
		}
		//**************************************************************************************************************//
		private int UploadFile()
		{
			string path;
			try { path = (string) socket.ReadObject(); }
			catch(ObjectDisposedException) { return -1; }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			FileStream fs;
			try { fs = new FileStream(path, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None); }
			catch(Exception e)
			{
				try { socket.WriteException(e) ; return 0; }
				catch { return -1; }
			}
			try { socket.WriteNoException(); return 0;}
			catch { return -1; }
			while(true)
			{
				FileTransferModeHearderInfo info;
				try 
				{
					info = ReadFileBlock();
					if(info == null)
						break;
					/*if(temp.SeekValue != lastOffset + lastLength)
					{
						fs.Seek(temp.SeekValue, SeekOrigin.Begin);
						fs.Write(temp.Data, 0, temp.Data.Length);
						j++;
					}
					else fs.Write(temp.Data, 0, temp.Data.Length);
					lastOffset = temp.SeekValue;
					lastLength = temp.Data.Length;
					written += temp.Data.Length;*/
				}
				catch{}
			}
			return 0;

		}
		//**************************************************************************************************************//
		private FileTransferModeHearderInfo ReadFileBlock()
		{
			LongMode _l1;
			LongMode _l2;
			byte b = socket.ReadByte();
			if(b == 0)
				return null; // meaning end read.
			_l1 = (LongMode)(b & 0x0F);
			_l2 = (LongMode)((b & 0xF0) >> 4);
			if(!Enum.IsDefined(typeof(LongMode), _l1) && !Enum.IsDefined(typeof(LongMode), _l2))
				throw new ArgumentOutOfRangeException("Not supported LongMode for FileTransferModeHeader.");
			byte[] val1 = socket.Read((int)_l1);
			byte[] val2 = socket.Read((int)_l2);
			if(val1.Length != (int)_l1 && val2.Length != (int)_l2)
				throw new ArgumentException("Bad format for FileTransferModeHeader.");
			long seekValue = (long)LongValueHeader.GetLongNumberFromBytes(val1);
			long readValue = (long)LongValueHeader.GetLongNumberFromBytes(val2);
			byte[] buffer = new byte[readValue];
			int n = socket.Read(buffer, buffer.Length);
			if(n != buffer.Length)
				throw new ArgumentException("Bad format for FileTransferModeHeader.");
			return new FileTransferModeHearderInfo(seekValue, buffer);
		}
		//**************************************************************************************************************//
	}
}